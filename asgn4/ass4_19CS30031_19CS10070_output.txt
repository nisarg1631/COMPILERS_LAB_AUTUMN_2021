-------------------- Parsing Line No. 1  --------------------


-------------------- Parsing Line No. 2  --------------------


-------------------- Parsing Line No. 3  --------------------


-------------------- Parsing Line No. 4  --------------------


-------------------- Parsing Line No. 5  --------------------


-------------------- Parsing Line No. 6  --------------------

INFO [Line 6] : function_specifier => inline
INFO [Line 6] : type_specifier => void
INFO [Line 6] : declaration_specifiers_opt => epsilon 
INFO [Line 6] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 6] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 6] : declaration_specifiers => function_specifier declaration_specifiers_opt
INFO [Line 6] : pointer_opt => epsilon
INFO [Line 6] : direct_declarator => IDENTIFIER
				IDENTIFIER = foo1
INFO [Line 6] : type_specifier => int
INFO [Line 6] : declaration_specifiers_opt => epsilon 
INFO [Line 6] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 6] : type_qualifier => restrict
INFO [Line 6] : type_qualifier_list => type_qualifier
INFO [Line 6] : type_qualifier_list_opt => type_qualifier_list
INFO [Line 6] : pointer => * type_qualifier_list_opt
INFO [Line 6] : pointer_opt => pointer
INFO [Line 6] : direct_declarator => IDENTIFIER
				IDENTIFIER = p1
INFO [Line 6] : declarator => pointer_opt direct_declarator
INFO [Line 6] : parameter_declaration => declaration_specifiers declarator
INFO [Line 6] : parameter_list => parameter_declaration
INFO [Line 6] : type_qualifier => const
INFO [Line 6] : type_specifier => int
INFO [Line 6] : declaration_specifiers_opt => epsilon 
INFO [Line 6] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 6] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 6] : declaration_specifiers => type_qualifier declaration_specifiers_opt
INFO [Line 6] : pointer_opt => epsilon
INFO [Line 6] : direct_declarator => IDENTIFIER
				IDENTIFIER = p2
INFO [Line 6] : declarator => pointer_opt direct_declarator
INFO [Line 6] : parameter_declaration => declaration_specifiers declarator
INFO [Line 6] : parameter_list => parameter_list , parameter_declaration
INFO [Line 6] : type_qualifier => volatile
INFO [Line 6] : type_specifier => int
INFO [Line 6] : declaration_specifiers_opt => epsilon 
INFO [Line 6] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 6] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 6] : declaration_specifiers => type_qualifier declaration_specifiers_opt
INFO [Line 6] : pointer_opt => epsilon
INFO [Line 6] : direct_declarator => IDENTIFIER
				IDENTIFIER = p3
INFO [Line 6] : declarator => pointer_opt direct_declarator
INFO [Line 6] : parameter_declaration => declaration_specifiers declarator
INFO [Line 6] : parameter_list => parameter_list , parameter_declaration
INFO [Line 6] : parameter_type_list => parameter_list , ...
INFO [Line 6] : direct_declarator => direct_declarator ( parameter_type_list )
INFO [Line 6] : declarator => pointer_opt direct_declarator
INFO [Line 6] : declaration_list_opt => epsilon

-------------------- Parsing Line No. 7  --------------------

INFO [Line 7] : storage_class_specifier => auto
INFO [Line 7] : type_specifier => int
INFO [Line 7] : declaration_specifiers_opt => epsilon 
INFO [Line 7] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 7] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 7] : declaration_specifiers => storage_class_specifier declaration_specifiers_opt
INFO [Line 7] : pointer_opt => epsilon
INFO [Line 7] : direct_declarator => IDENTIFIER
				IDENTIFIER = a
INFO [Line 7] : declarator => pointer_opt direct_declarator
INFO [Line 7] : init_declarator => declarator
INFO [Line 7] : init_declarator_list => init_declarator
INFO [Line 7] : init_declarator_list_opt => init_declarator_list
INFO [Line 7] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 7] : block_item => declaration
INFO [Line 7] : block_item_list => block_item

-------------------- Parsing Line No. 8  --------------------

INFO [Line 8] : storage_class_specifier => register
INFO [Line 8] : type_specifier => int
INFO [Line 8] : declaration_specifiers_opt => epsilon 
INFO [Line 8] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 8] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 8] : declaration_specifiers => storage_class_specifier declaration_specifiers_opt
INFO [Line 8] : pointer_opt => epsilon
INFO [Line 8] : direct_declarator => IDENTIFIER
				IDENTIFIER = b
INFO [Line 8] : declarator => pointer_opt direct_declarator
INFO [Line 8] : init_declarator => declarator
INFO [Line 8] : init_declarator_list => init_declarator
INFO [Line 8] : init_declarator_list_opt => init_declarator_list
INFO [Line 8] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 8] : block_item => declaration
INFO [Line 8] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 9  --------------------

INFO [Line 9] : storage_class_specifier => extern
INFO [Line 9] : type_specifier => int
INFO [Line 9] : declaration_specifiers_opt => epsilon 
INFO [Line 9] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 9] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 9] : declaration_specifiers => storage_class_specifier declaration_specifiers_opt
INFO [Line 9] : pointer_opt => epsilon
INFO [Line 9] : direct_declarator => IDENTIFIER
				IDENTIFIER = c
INFO [Line 9] : declarator => pointer_opt direct_declarator
INFO [Line 9] : init_declarator => declarator
INFO [Line 9] : init_declarator_list => init_declarator
INFO [Line 9] : init_declarator_list_opt => init_declarator_list
INFO [Line 9] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 9] : block_item => declaration
INFO [Line 9] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 10  --------------------

INFO [Line 10] : storage_class_specifier => static
INFO [Line 10] : type_specifier => int
INFO [Line 10] : declaration_specifiers_opt => epsilon 
INFO [Line 10] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 10] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 10] : declaration_specifiers => storage_class_specifier declaration_specifiers_opt
INFO [Line 10] : pointer_opt => epsilon
INFO [Line 10] : direct_declarator => IDENTIFIER
				IDENTIFIER = d
INFO [Line 10] : declarator => pointer_opt direct_declarator
INFO [Line 10] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 4
INFO [Line 10] : postfix_expression => primary_expression
INFO [Line 10] : unary_expression => postfix_expression
INFO [Line 10] : cast_expression => unary_expression
INFO [Line 10] : multiplicative_expression => cast_expression
INFO [Line 10] : additive_expression => multiplicative_expression
INFO [Line 10] : shift_expression => additive_expression
INFO [Line 10] : relational_expression => shift_expression
INFO [Line 10] : equality_expression => relational_expression
INFO [Line 10] : AND_expression => equality_expression
INFO [Line 10] : exclusive_OR_expression => AND_expression
INFO [Line 10] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 10] : logical_AND_expression => inclusive_OR_expression
INFO [Line 10] : logical_OR_expression => logical_AND_expression
INFO [Line 10] : conditional_expression => logical_OR_expression
INFO [Line 10] : assignment_expression => conditional_expression
INFO [Line 10] : initialiser => assignment_expression
INFO [Line 10] : init_declarator => declarator = initialiser
INFO [Line 10] : init_declarator_list => init_declarator
INFO [Line 10] : init_declarator_list_opt => init_declarator_list
INFO [Line 10] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 10] : block_item => declaration
INFO [Line 10] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 11  --------------------

INFO [Line 11] : block_item_list_opt => block_item_list
INFO [Line 11] : compound_statement => { block_item_list_opt }
INFO [Line 11] : function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
INFO [Line 11] : external_declaration => function_definition
INFO [Line 11] : translation_unit => external_declaration

-------------------- Parsing Line No. 12  --------------------


-------------------- Parsing Line No. 13  --------------------

INFO [Line 13] : type_qualifier => const
INFO [Line 13] : type_specifier => char
INFO [Line 13] : declaration_specifiers_opt => epsilon 
INFO [Line 13] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 13] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 13] : declaration_specifiers => type_qualifier declaration_specifiers_opt
INFO [Line 13] : type_qualifier_list_opt => epsilon
INFO [Line 13] : pointer => * type_qualifier_list_opt
INFO [Line 13] : pointer_opt => pointer
INFO [Line 13] : direct_declarator => IDENTIFIER
				IDENTIFIER = foo2
INFO [Line 13] : type_specifier => int
INFO [Line 13] : declaration_specifiers_opt => epsilon 
INFO [Line 13] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 13] : pointer_opt => epsilon
INFO [Line 13] : direct_declarator => IDENTIFIER
				IDENTIFIER = b
INFO [Line 13] : type_qualifier => const
INFO [Line 13] : type_qualifier_list => type_qualifier
INFO [Line 13] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 8
INFO [Line 13] : postfix_expression => primary_expression
INFO [Line 13] : unary_expression => postfix_expression
INFO [Line 13] : cast_expression => unary_expression
INFO [Line 13] : multiplicative_expression => cast_expression
INFO [Line 13] : additive_expression => multiplicative_expression
INFO [Line 13] : shift_expression => additive_expression
INFO [Line 13] : relational_expression => shift_expression
INFO [Line 13] : equality_expression => relational_expression
INFO [Line 13] : AND_expression => equality_expression
INFO [Line 13] : exclusive_OR_expression => AND_expression
INFO [Line 13] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 13] : logical_AND_expression => inclusive_OR_expression
INFO [Line 13] : logical_OR_expression => logical_AND_expression
INFO [Line 13] : conditional_expression => logical_OR_expression
INFO [Line 13] : assignment_expression => conditional_expression
INFO [Line 13] : direct_declarator => direct_declarator [ type_qualifier_list static assignment_expression ]
INFO [Line 13] : declarator => pointer_opt direct_declarator
INFO [Line 13] : parameter_declaration => declaration_specifiers declarator
INFO [Line 13] : parameter_list => parameter_declaration
INFO [Line 13] : type_specifier => int
INFO [Line 13] : declaration_specifiers_opt => epsilon 
INFO [Line 13] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 13] : pointer_opt => epsilon
INFO [Line 13] : direct_declarator => IDENTIFIER
				IDENTIFIER = c
INFO [Line 13] : type_qualifier_list_opt => epsilon
INFO [Line 13] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 9
INFO [Line 13] : postfix_expression => primary_expression
INFO [Line 13] : unary_expression => postfix_expression
INFO [Line 13] : cast_expression => unary_expression
INFO [Line 13] : multiplicative_expression => cast_expression
INFO [Line 13] : additive_expression => multiplicative_expression
INFO [Line 13] : shift_expression => additive_expression
INFO [Line 13] : relational_expression => shift_expression
INFO [Line 13] : equality_expression => relational_expression
INFO [Line 13] : AND_expression => equality_expression
INFO [Line 13] : exclusive_OR_expression => AND_expression
INFO [Line 13] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 13] : logical_AND_expression => inclusive_OR_expression
INFO [Line 13] : logical_OR_expression => logical_AND_expression
INFO [Line 13] : conditional_expression => logical_OR_expression
INFO [Line 13] : assignment_expression => conditional_expression
INFO [Line 13] : direct_declarator => direct_declarator [ static type_qualifier_list_opt assignment_expression ]
INFO [Line 13] : declarator => pointer_opt direct_declarator
INFO [Line 13] : parameter_declaration => declaration_specifiers declarator
INFO [Line 13] : parameter_list => parameter_list , parameter_declaration
INFO [Line 13] : type_specifier => int
INFO [Line 13] : declaration_specifiers_opt => epsilon 
INFO [Line 13] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 13] : pointer_opt => epsilon
INFO [Line 13] : direct_declarator => IDENTIFIER
				IDENTIFIER = d
INFO [Line 13] : type_qualifier_list_opt => epsilon
INFO [Line 13] : assignment_expression_opt => epsilon
INFO [Line 13] : direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
INFO [Line 13] : declarator => pointer_opt direct_declarator
INFO [Line 13] : parameter_declaration => declaration_specifiers declarator
INFO [Line 13] : parameter_list => parameter_list , parameter_declaration
INFO [Line 13] : type_specifier => int
INFO [Line 13] : declaration_specifiers_opt => epsilon 
INFO [Line 13] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 13] : pointer_opt => epsilon
INFO [Line 13] : direct_declarator => IDENTIFIER
				IDENTIFIER = e
INFO [Line 13] : type_qualifier => const
INFO [Line 13] : type_qualifier_list => type_qualifier
INFO [Line 13] : type_qualifier_list_opt => type_qualifier_list
INFO [Line 13] : direct_declarator => direct_declarator [ type_qualifier_list_opt * ]
INFO [Line 13] : declarator => pointer_opt direct_declarator
INFO [Line 13] : parameter_declaration => declaration_specifiers declarator
INFO [Line 13] : parameter_list => parameter_list , parameter_declaration
INFO [Line 13] : parameter_type_list => parameter_list
INFO [Line 13] : direct_declarator => direct_declarator ( parameter_type_list )
INFO [Line 13] : declarator => pointer_opt direct_declarator
INFO [Line 13] : init_declarator => declarator
INFO [Line 13] : init_declarator_list => init_declarator
INFO [Line 13] : init_declarator_list_opt => init_declarator_list
INFO [Line 13] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 13] : external_declaration => declaration
INFO [Line 13] : translation_unit => translation_unit external_declaration

-------------------- Parsing Line No. 14  --------------------


-------------------- Parsing Line No. 15  --------------------

INFO [Line 15] : enum_specifier => enum IDENTIFIER
				IDENTIFIER = e1
INFO [Line 15] : type_specifier => enum_specifier
INFO [Line 15] : declaration_specifiers_opt => epsilon 
INFO [Line 15] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 15] : init_declarator_list_opt => epsilon
INFO [Line 15] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 15] : external_declaration => declaration
INFO [Line 15] : translation_unit => translation_unit external_declaration

-------------------- Parsing Line No. 16  --------------------

INFO [Line 16] : identifier_opt => IDENTIFIER
				IDENTIFIER = e2
INFO [Line 16] : enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = TAG1
INFO [Line 16] : enumerator_list => enumerator
INFO [Line 16] : enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = TAG2
INFO [Line 16] : enumerator_list => enumerator_list , enumerator
INFO [Line 16] : enum_specifier => enum identifier_opt { enumerator_list }
INFO [Line 16] : type_specifier => enum_specifier
INFO [Line 16] : declaration_specifiers_opt => epsilon 
INFO [Line 16] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 16] : init_declarator_list_opt => epsilon
INFO [Line 16] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 16] : external_declaration => declaration
INFO [Line 16] : translation_unit => translation_unit external_declaration

-------------------- Parsing Line No. 17  --------------------

INFO [Line 17] : identifier_opt => epsilon
INFO [Line 17] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
INFO [Line 17] : postfix_expression => primary_expression
INFO [Line 17] : unary_expression => postfix_expression
INFO [Line 17] : cast_expression => unary_expression
INFO [Line 17] : multiplicative_expression => cast_expression
INFO [Line 17] : additive_expression => multiplicative_expression
INFO [Line 17] : shift_expression => additive_expression
INFO [Line 17] : relational_expression => shift_expression
INFO [Line 17] : equality_expression => relational_expression
INFO [Line 17] : AND_expression => equality_expression
INFO [Line 17] : exclusive_OR_expression => AND_expression
INFO [Line 17] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 17] : logical_AND_expression => inclusive_OR_expression
INFO [Line 17] : logical_OR_expression => logical_AND_expression
INFO [Line 17] : conditional_expression => logical_OR_expression
INFO [Line 17] : constant_expression => conditional_expression
INFO [Line 17] : enumerator => ENUMERATION_CONSTANT = constant_expression
				ENUMERATION_CONSTANT = TAG3
INFO [Line 17] : enumerator_list => enumerator
INFO [Line 17] : enumerator => ENUMERATION_CONSTANT
				ENUMERATION_CONSTANT = TAG4
INFO [Line 17] : enumerator_list => enumerator_list , enumerator
INFO [Line 17] : enum_specifier => enum identifier_opt { enumerator_list }
INFO [Line 17] : type_specifier => enum_specifier
INFO [Line 17] : declaration_specifiers_opt => epsilon 
INFO [Line 17] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 17] : pointer_opt => epsilon
INFO [Line 17] : direct_declarator => IDENTIFIER
				IDENTIFIER = e3
INFO [Line 17] : declarator => pointer_opt direct_declarator
INFO [Line 17] : init_declarator => declarator
INFO [Line 17] : init_declarator_list => init_declarator
INFO [Line 17] : init_declarator_list_opt => init_declarator_list
INFO [Line 17] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 17] : external_declaration => declaration
INFO [Line 17] : translation_unit => translation_unit external_declaration

-------------------- Parsing Line No. 18  --------------------


-------------------- Parsing Line No. 19  --------------------

INFO [Line 19] : type_specifier => signed
INFO [Line 19] : declaration_specifiers_opt => epsilon 
INFO [Line 19] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 19] : pointer_opt => epsilon
INFO [Line 19] : direct_declarator => IDENTIFIER
				IDENTIFIER = main
INFO [Line 19] : identifier_list_opt => epsilon
INFO [Line 19] : direct_declarator => direct_declarator ( identifier_list_opt )
INFO [Line 19] : declarator => pointer_opt direct_declarator
INFO [Line 19] : declaration_list_opt => epsilon

-------------------- Parsing Line No. 20  --------------------

INFO [Line 20] : type_specifier => int
INFO [Line 20] : declaration_specifiers_opt => epsilon 
INFO [Line 20] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 20] : pointer_opt => epsilon
INFO [Line 20] : direct_declarator => IDENTIFIER
				IDENTIFIER = a
INFO [Line 20] : type_qualifier_list_opt => epsilon
INFO [Line 20] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 6
INFO [Line 20] : postfix_expression => primary_expression
INFO [Line 20] : unary_expression => postfix_expression
INFO [Line 20] : cast_expression => unary_expression
INFO [Line 20] : multiplicative_expression => cast_expression
INFO [Line 20] : additive_expression => multiplicative_expression
INFO [Line 20] : shift_expression => additive_expression
INFO [Line 20] : relational_expression => shift_expression
INFO [Line 20] : equality_expression => relational_expression
INFO [Line 20] : AND_expression => equality_expression
INFO [Line 20] : exclusive_OR_expression => AND_expression
INFO [Line 20] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 20] : logical_AND_expression => inclusive_OR_expression
INFO [Line 20] : logical_OR_expression => logical_AND_expression
INFO [Line 20] : conditional_expression => logical_OR_expression
INFO [Line 20] : assignment_expression => conditional_expression
INFO [Line 20] : assignment_expression_opt => assignment_expression
INFO [Line 20] : direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
INFO [Line 20] : declarator => pointer_opt direct_declarator
INFO [Line 20] : designation_opt => epsilon
INFO [Line 20] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
INFO [Line 20] : postfix_expression => primary_expression
INFO [Line 20] : unary_expression => postfix_expression
INFO [Line 20] : cast_expression => unary_expression
INFO [Line 20] : multiplicative_expression => cast_expression
INFO [Line 20] : additive_expression => multiplicative_expression
INFO [Line 20] : shift_expression => additive_expression
INFO [Line 20] : relational_expression => shift_expression
INFO [Line 20] : equality_expression => relational_expression
INFO [Line 20] : AND_expression => equality_expression
INFO [Line 20] : exclusive_OR_expression => AND_expression
INFO [Line 20] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 20] : logical_AND_expression => inclusive_OR_expression
INFO [Line 20] : logical_OR_expression => logical_AND_expression
INFO [Line 20] : conditional_expression => logical_OR_expression
INFO [Line 20] : assignment_expression => conditional_expression
INFO [Line 20] : initialiser => assignment_expression
INFO [Line 20] : initialiser_list => designation_opt initialiser
INFO [Line 20] : designation_opt => epsilon
INFO [Line 20] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
INFO [Line 20] : postfix_expression => primary_expression
INFO [Line 20] : unary_expression => postfix_expression
INFO [Line 20] : cast_expression => unary_expression
INFO [Line 20] : multiplicative_expression => cast_expression
INFO [Line 20] : additive_expression => multiplicative_expression
INFO [Line 20] : shift_expression => additive_expression
INFO [Line 20] : relational_expression => shift_expression
INFO [Line 20] : equality_expression => relational_expression
INFO [Line 20] : AND_expression => equality_expression
INFO [Line 20] : exclusive_OR_expression => AND_expression
INFO [Line 20] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 20] : logical_AND_expression => inclusive_OR_expression
INFO [Line 20] : logical_OR_expression => logical_AND_expression
INFO [Line 20] : conditional_expression => logical_OR_expression
INFO [Line 20] : assignment_expression => conditional_expression
INFO [Line 20] : initialiser => assignment_expression
INFO [Line 20] : initialiser_list => initialiser_list , designation_opt initialiser
INFO [Line 20] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
INFO [Line 20] : postfix_expression => primary_expression
INFO [Line 20] : unary_expression => postfix_expression
INFO [Line 20] : cast_expression => unary_expression
INFO [Line 20] : multiplicative_expression => cast_expression
INFO [Line 20] : additive_expression => multiplicative_expression
INFO [Line 20] : shift_expression => additive_expression
INFO [Line 20] : relational_expression => shift_expression
INFO [Line 20] : equality_expression => relational_expression
INFO [Line 20] : AND_expression => equality_expression
INFO [Line 20] : exclusive_OR_expression => AND_expression
INFO [Line 20] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 20] : logical_AND_expression => inclusive_OR_expression
INFO [Line 20] : logical_OR_expression => logical_AND_expression
INFO [Line 20] : conditional_expression => logical_OR_expression
INFO [Line 20] : constant_expression => conditional_expression
INFO [Line 20] : designator => [ constant_expression ]
INFO [Line 20] : designator_list => designator
INFO [Line 20] : designation => designator_list =
INFO [Line 20] : designation_opt => designation
INFO [Line 20] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 3
INFO [Line 20] : postfix_expression => primary_expression
INFO [Line 20] : unary_expression => postfix_expression
INFO [Line 20] : cast_expression => unary_expression
INFO [Line 20] : multiplicative_expression => cast_expression
INFO [Line 20] : additive_expression => multiplicative_expression
INFO [Line 20] : shift_expression => additive_expression
INFO [Line 20] : relational_expression => shift_expression
INFO [Line 20] : equality_expression => relational_expression
INFO [Line 20] : AND_expression => equality_expression
INFO [Line 20] : exclusive_OR_expression => AND_expression
INFO [Line 20] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 20] : logical_AND_expression => inclusive_OR_expression
INFO [Line 20] : logical_OR_expression => logical_AND_expression
INFO [Line 20] : conditional_expression => logical_OR_expression
INFO [Line 20] : assignment_expression => conditional_expression
INFO [Line 20] : initialiser => assignment_expression
INFO [Line 20] : initialiser_list => initialiser_list , designation_opt initialiser
INFO [Line 20] : initialiser => { initialiser_list }
INFO [Line 20] : init_declarator => declarator = initialiser
INFO [Line 20] : init_declarator_list => init_declarator
INFO [Line 20] : init_declarator_list_opt => init_declarator_list
INFO [Line 20] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 20] : block_item => declaration
INFO [Line 20] : block_item_list => block_item

-------------------- Parsing Line No. 21  --------------------

INFO [Line 21] : type_specifier => char
INFO [Line 21] : declaration_specifiers_opt => epsilon 
INFO [Line 21] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 21] : pointer_opt => epsilon
INFO [Line 21] : direct_declarator => IDENTIFIER
				IDENTIFIER = b
INFO [Line 21] : type_qualifier_list_opt => epsilon
INFO [Line 21] : assignment_expression_opt => epsilon
INFO [Line 21] : direct_declarator => direct_declarator [ type_qualifier_list_opt assignment_expression_opt ]
INFO [Line 21] : declarator => pointer_opt direct_declarator
INFO [Line 21] : primary_expression => STRING_LITERAL
				STRING_LITERAL = "Test string :)"
INFO [Line 21] : postfix_expression => primary_expression
INFO [Line 21] : unary_expression => postfix_expression
INFO [Line 21] : cast_expression => unary_expression
INFO [Line 21] : multiplicative_expression => cast_expression
INFO [Line 21] : additive_expression => multiplicative_expression
INFO [Line 21] : shift_expression => additive_expression
INFO [Line 21] : relational_expression => shift_expression
INFO [Line 21] : equality_expression => relational_expression
INFO [Line 21] : AND_expression => equality_expression
INFO [Line 21] : exclusive_OR_expression => AND_expression
INFO [Line 21] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 21] : logical_AND_expression => inclusive_OR_expression
INFO [Line 21] : logical_OR_expression => logical_AND_expression
INFO [Line 21] : conditional_expression => logical_OR_expression
INFO [Line 21] : assignment_expression => conditional_expression
INFO [Line 21] : initialiser => assignment_expression
INFO [Line 21] : init_declarator => declarator = initialiser
INFO [Line 21] : init_declarator_list => init_declarator
INFO [Line 21] : init_declarator_list_opt => init_declarator_list
INFO [Line 21] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 21] : block_item => declaration
INFO [Line 21] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 22  --------------------

INFO [Line 22] : type_specifier => char
INFO [Line 22] : declaration_specifiers_opt => epsilon 
INFO [Line 22] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 22] : pointer_opt => epsilon
INFO [Line 22] : direct_declarator => IDENTIFIER
				IDENTIFIER = c1
INFO [Line 22] : declarator => pointer_opt direct_declarator
INFO [Line 22] : primary_expression => CHARACTER_CONSTANT
				CHARACTER_CONSTANT = 'c'
INFO [Line 22] : postfix_expression => primary_expression
INFO [Line 22] : unary_expression => postfix_expression
INFO [Line 22] : cast_expression => unary_expression
INFO [Line 22] : multiplicative_expression => cast_expression
INFO [Line 22] : additive_expression => multiplicative_expression
INFO [Line 22] : shift_expression => additive_expression
INFO [Line 22] : relational_expression => shift_expression
INFO [Line 22] : equality_expression => relational_expression
INFO [Line 22] : AND_expression => equality_expression
INFO [Line 22] : exclusive_OR_expression => AND_expression
INFO [Line 22] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 22] : logical_AND_expression => inclusive_OR_expression
INFO [Line 22] : logical_OR_expression => logical_AND_expression
INFO [Line 22] : conditional_expression => logical_OR_expression
INFO [Line 22] : assignment_expression => conditional_expression
INFO [Line 22] : initialiser => assignment_expression
INFO [Line 22] : init_declarator => declarator = initialiser
INFO [Line 22] : init_declarator_list => init_declarator
INFO [Line 22] : init_declarator_list_opt => init_declarator_list
INFO [Line 22] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 22] : block_item => declaration
INFO [Line 22] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 23  --------------------

INFO [Line 23] : type_specifier => char
INFO [Line 23] : declaration_specifiers_opt => epsilon 
INFO [Line 23] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 23] : type_qualifier_list_opt => epsilon
INFO [Line 23] : pointer => * type_qualifier_list_opt
INFO [Line 23] : pointer_opt => pointer
INFO [Line 23] : direct_declarator => IDENTIFIER
				IDENTIFIER = c2
INFO [Line 23] : declarator => pointer_opt direct_declarator
INFO [Line 23] : unary_operator => &
INFO [Line 23] : primary_expression => IDENTIFIER
				IDENTIFIER = c1
INFO [Line 23] : postfix_expression => primary_expression
INFO [Line 23] : unary_expression => postfix_expression
INFO [Line 23] : cast_expression => unary_expression
INFO [Line 23] : unary_expression => unary_operator cast_expression
INFO [Line 23] : cast_expression => unary_expression
INFO [Line 23] : multiplicative_expression => cast_expression
INFO [Line 23] : additive_expression => multiplicative_expression
INFO [Line 23] : shift_expression => additive_expression
INFO [Line 23] : relational_expression => shift_expression
INFO [Line 23] : equality_expression => relational_expression
INFO [Line 23] : AND_expression => equality_expression
INFO [Line 23] : exclusive_OR_expression => AND_expression
INFO [Line 23] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 23] : logical_AND_expression => inclusive_OR_expression
INFO [Line 23] : logical_OR_expression => logical_AND_expression
INFO [Line 23] : conditional_expression => logical_OR_expression
INFO [Line 23] : assignment_expression => conditional_expression
INFO [Line 23] : initialiser => assignment_expression
INFO [Line 23] : init_declarator => declarator = initialiser
INFO [Line 23] : init_declarator_list => init_declarator
INFO [Line 23] : init_declarator_list_opt => init_declarator_list
INFO [Line 23] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 23] : block_item => declaration
INFO [Line 23] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 24  --------------------

INFO [Line 24] : unary_operator => *
INFO [Line 24] : primary_expression => IDENTIFIER
				IDENTIFIER = c2
INFO [Line 24] : postfix_expression => primary_expression
INFO [Line 24] : unary_expression => postfix_expression
INFO [Line 24] : cast_expression => unary_expression
INFO [Line 24] : unary_expression => unary_operator cast_expression
INFO [Line 24] : assignment_operator => =
INFO [Line 24] : primary_expression => CHARACTER_CONSTANT
				CHARACTER_CONSTANT = 'a'
INFO [Line 24] : postfix_expression => primary_expression
INFO [Line 24] : unary_expression => postfix_expression
INFO [Line 24] : cast_expression => unary_expression
INFO [Line 24] : multiplicative_expression => cast_expression
INFO [Line 24] : additive_expression => multiplicative_expression
INFO [Line 24] : shift_expression => additive_expression
INFO [Line 24] : relational_expression => shift_expression
INFO [Line 24] : equality_expression => relational_expression
INFO [Line 24] : AND_expression => equality_expression
INFO [Line 24] : exclusive_OR_expression => AND_expression
INFO [Line 24] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 24] : logical_AND_expression => inclusive_OR_expression
INFO [Line 24] : logical_OR_expression => logical_AND_expression
INFO [Line 24] : conditional_expression => logical_OR_expression
INFO [Line 24] : assignment_expression => conditional_expression
INFO [Line 24] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 24] : expression => assignment_expression
INFO [Line 24] : expression_opt => expression
INFO [Line 24] : expression_statement => expression_opt ;
INFO [Line 24] : statement => expression_statement
INFO [Line 24] : block_item => statement
INFO [Line 24] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 25  --------------------

INFO [Line 25] : type_specifier => char
INFO [Line 25] : declaration_specifiers_opt => epsilon 
INFO [Line 25] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 25] : type_qualifier_list_opt => epsilon
INFO [Line 25] : type_qualifier_list_opt => epsilon
INFO [Line 25] : pointer => * type_qualifier_list_opt
INFO [Line 25] : pointer => * type_qualifier_list_opt pointer
INFO [Line 25] : pointer_opt => pointer
INFO [Line 25] : direct_declarator => IDENTIFIER
				IDENTIFIER = d
INFO [Line 25] : declarator => pointer_opt direct_declarator
INFO [Line 25] : type_specifier => char
INFO [Line 25] : specifier_qualifier_list_opt => epsilon
INFO [Line 25] : specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
INFO [Line 25] : type_name => specifier_qualifier_list
INFO [Line 25] : designation_opt => epsilon
INFO [Line 25] : primary_expression => STRING_LITERAL
				STRING_LITERAL = "a"
INFO [Line 25] : postfix_expression => primary_expression
INFO [Line 25] : unary_expression => postfix_expression
INFO [Line 25] : cast_expression => unary_expression
INFO [Line 25] : multiplicative_expression => cast_expression
INFO [Line 25] : additive_expression => multiplicative_expression
INFO [Line 25] : shift_expression => additive_expression
INFO [Line 25] : relational_expression => shift_expression
INFO [Line 25] : equality_expression => relational_expression
INFO [Line 25] : AND_expression => equality_expression
INFO [Line 25] : exclusive_OR_expression => AND_expression
INFO [Line 25] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 25] : logical_AND_expression => inclusive_OR_expression
INFO [Line 25] : logical_OR_expression => logical_AND_expression
INFO [Line 25] : conditional_expression => logical_OR_expression
INFO [Line 25] : assignment_expression => conditional_expression
INFO [Line 25] : initialiser => assignment_expression
INFO [Line 25] : initialiser_list => designation_opt initialiser
INFO [Line 25] : designation_opt => epsilon
INFO [Line 25] : primary_expression => IDENTIFIER
				IDENTIFIER = b
INFO [Line 25] : postfix_expression => primary_expression
INFO [Line 25] : unary_expression => postfix_expression
INFO [Line 25] : cast_expression => unary_expression
INFO [Line 25] : multiplicative_expression => cast_expression
INFO [Line 25] : additive_expression => multiplicative_expression
INFO [Line 25] : shift_expression => additive_expression
INFO [Line 25] : relational_expression => shift_expression
INFO [Line 25] : equality_expression => relational_expression
INFO [Line 25] : AND_expression => equality_expression
INFO [Line 25] : exclusive_OR_expression => AND_expression
INFO [Line 25] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 25] : logical_AND_expression => inclusive_OR_expression
INFO [Line 25] : logical_OR_expression => logical_AND_expression
INFO [Line 25] : conditional_expression => logical_OR_expression
INFO [Line 25] : assignment_expression => conditional_expression
INFO [Line 25] : initialiser => assignment_expression
INFO [Line 25] : initialiser_list => initialiser_list , designation_opt initialiser
INFO [Line 25] : designation_opt => epsilon
INFO [Line 25] : primary_expression => STRING_LITERAL
				STRING_LITERAL = "abc"
INFO [Line 25] : postfix_expression => primary_expression
INFO [Line 25] : unary_expression => postfix_expression
INFO [Line 25] : cast_expression => unary_expression
INFO [Line 25] : multiplicative_expression => cast_expression
INFO [Line 25] : additive_expression => multiplicative_expression
INFO [Line 25] : shift_expression => additive_expression
INFO [Line 25] : relational_expression => shift_expression
INFO [Line 25] : equality_expression => relational_expression
INFO [Line 25] : AND_expression => equality_expression
INFO [Line 25] : exclusive_OR_expression => AND_expression
INFO [Line 25] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 25] : logical_AND_expression => inclusive_OR_expression
INFO [Line 25] : logical_OR_expression => logical_AND_expression
INFO [Line 25] : conditional_expression => logical_OR_expression
INFO [Line 25] : assignment_expression => conditional_expression
INFO [Line 25] : initialiser => assignment_expression
INFO [Line 25] : initialiser_list => initialiser_list , designation_opt initialiser
INFO [Line 25] : postfix_expression => ( type_name ) { initialiser_list }
INFO [Line 25] : unary_expression => postfix_expression
INFO [Line 25] : cast_expression => unary_expression
INFO [Line 25] : multiplicative_expression => cast_expression
INFO [Line 25] : additive_expression => multiplicative_expression
INFO [Line 25] : shift_expression => additive_expression
INFO [Line 25] : relational_expression => shift_expression
INFO [Line 25] : equality_expression => relational_expression
INFO [Line 25] : AND_expression => equality_expression
INFO [Line 25] : exclusive_OR_expression => AND_expression
INFO [Line 25] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 25] : logical_AND_expression => inclusive_OR_expression
INFO [Line 25] : logical_OR_expression => logical_AND_expression
INFO [Line 25] : conditional_expression => logical_OR_expression
INFO [Line 25] : assignment_expression => conditional_expression
INFO [Line 25] : initialiser => assignment_expression
INFO [Line 25] : init_declarator => declarator = initialiser
INFO [Line 25] : init_declarator_list => init_declarator
INFO [Line 25] : init_declarator_list_opt => init_declarator_list
INFO [Line 25] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 25] : block_item => declaration
INFO [Line 25] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 26  --------------------


-------------------- Parsing Line No. 27  --------------------

INFO [Line 27] : type_specifier => unsigned
INFO [Line 27] : type_specifier => long
INFO [Line 27] : declaration_specifiers_opt => epsilon 
INFO [Line 27] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 27] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 27] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 27] : pointer_opt => epsilon
INFO [Line 27] : direct_declarator => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 27] : declarator => pointer_opt direct_declarator
INFO [Line 27] : unary_operator => +
INFO [Line 27] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 123456789
INFO [Line 27] : postfix_expression => primary_expression
INFO [Line 27] : unary_expression => postfix_expression
INFO [Line 27] : cast_expression => unary_expression
INFO [Line 27] : unary_expression => unary_operator cast_expression
INFO [Line 27] : cast_expression => unary_expression
INFO [Line 27] : multiplicative_expression => cast_expression
INFO [Line 27] : additive_expression => multiplicative_expression
INFO [Line 27] : shift_expression => additive_expression
INFO [Line 27] : relational_expression => shift_expression
INFO [Line 27] : equality_expression => relational_expression
INFO [Line 27] : AND_expression => equality_expression
INFO [Line 27] : exclusive_OR_expression => AND_expression
INFO [Line 27] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 27] : logical_AND_expression => inclusive_OR_expression
INFO [Line 27] : logical_OR_expression => logical_AND_expression
INFO [Line 27] : conditional_expression => logical_OR_expression
INFO [Line 27] : assignment_expression => conditional_expression
INFO [Line 27] : initialiser => assignment_expression
INFO [Line 27] : init_declarator => declarator = initialiser
INFO [Line 27] : init_declarator_list => init_declarator
INFO [Line 27] : init_declarator_list_opt => init_declarator_list
INFO [Line 27] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 27] : block_item => declaration
INFO [Line 27] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 28  --------------------

INFO [Line 28] : type_specifier => short
INFO [Line 28] : declaration_specifiers_opt => epsilon 
INFO [Line 28] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 28] : pointer_opt => epsilon
INFO [Line 28] : direct_declarator => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 28] : declarator => pointer_opt direct_declarator
INFO [Line 28] : unary_operator => ~
INFO [Line 28] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 16
INFO [Line 28] : postfix_expression => primary_expression
INFO [Line 28] : unary_expression => postfix_expression
INFO [Line 28] : cast_expression => unary_expression
INFO [Line 28] : unary_expression => unary_operator cast_expression
INFO [Line 28] : cast_expression => unary_expression
INFO [Line 28] : multiplicative_expression => cast_expression
INFO [Line 28] : additive_expression => multiplicative_expression
INFO [Line 28] : shift_expression => additive_expression
INFO [Line 28] : relational_expression => shift_expression
INFO [Line 28] : equality_expression => relational_expression
INFO [Line 28] : AND_expression => equality_expression
INFO [Line 28] : exclusive_OR_expression => AND_expression
INFO [Line 28] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 28] : logical_AND_expression => inclusive_OR_expression
INFO [Line 28] : logical_OR_expression => logical_AND_expression
INFO [Line 28] : conditional_expression => logical_OR_expression
INFO [Line 28] : assignment_expression => conditional_expression
INFO [Line 28] : initialiser => assignment_expression
INFO [Line 28] : init_declarator => declarator = initialiser
INFO [Line 28] : init_declarator_list => init_declarator
INFO [Line 28] : init_declarator_list_opt => init_declarator_list
INFO [Line 28] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 28] : block_item => declaration
INFO [Line 28] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 29  --------------------

INFO [Line 29] : type_specifier => float
INFO [Line 29] : declaration_specifiers_opt => epsilon 
INFO [Line 29] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 29] : pointer_opt => epsilon
INFO [Line 29] : direct_declarator => IDENTIFIER
				IDENTIFIER = n3
INFO [Line 29] : declarator => pointer_opt direct_declarator
INFO [Line 29] : unary_operator => -
INFO [Line 29] : primary_expression => FLOATING_CONSTANT
				FLOATING_CONSTANT = 3.530000
INFO [Line 29] : postfix_expression => primary_expression
INFO [Line 29] : unary_expression => postfix_expression
INFO [Line 29] : cast_expression => unary_expression
INFO [Line 29] : unary_expression => unary_operator cast_expression
INFO [Line 29] : cast_expression => unary_expression
INFO [Line 29] : multiplicative_expression => cast_expression
INFO [Line 29] : additive_expression => multiplicative_expression
INFO [Line 29] : shift_expression => additive_expression
INFO [Line 29] : relational_expression => shift_expression
INFO [Line 29] : equality_expression => relational_expression
INFO [Line 29] : AND_expression => equality_expression
INFO [Line 29] : exclusive_OR_expression => AND_expression
INFO [Line 29] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 29] : logical_AND_expression => inclusive_OR_expression
INFO [Line 29] : logical_OR_expression => logical_AND_expression
INFO [Line 29] : conditional_expression => logical_OR_expression
INFO [Line 29] : assignment_expression => conditional_expression
INFO [Line 29] : initialiser => assignment_expression
INFO [Line 29] : init_declarator => declarator = initialiser
INFO [Line 29] : init_declarator_list => init_declarator
INFO [Line 29] : init_declarator_list_opt => init_declarator_list
INFO [Line 29] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 29] : block_item => declaration
INFO [Line 29] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 30  --------------------

INFO [Line 30] : type_specifier => double
INFO [Line 30] : declaration_specifiers_opt => epsilon 
INFO [Line 30] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 30] : pointer_opt => epsilon
INFO [Line 30] : direct_declarator => IDENTIFIER
				IDENTIFIER = n4
INFO [Line 30] : declarator => pointer_opt direct_declarator
INFO [Line 30] : primary_expression => FLOATING_CONSTANT
				FLOATING_CONSTANT = 0.029900
INFO [Line 30] : postfix_expression => primary_expression
INFO [Line 30] : unary_expression => postfix_expression
INFO [Line 30] : cast_expression => unary_expression
INFO [Line 30] : multiplicative_expression => cast_expression
INFO [Line 30] : additive_expression => multiplicative_expression
INFO [Line 30] : shift_expression => additive_expression
INFO [Line 30] : relational_expression => shift_expression
INFO [Line 30] : equality_expression => relational_expression
INFO [Line 30] : AND_expression => equality_expression
INFO [Line 30] : exclusive_OR_expression => AND_expression
INFO [Line 30] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 30] : logical_AND_expression => inclusive_OR_expression
INFO [Line 30] : logical_OR_expression => logical_AND_expression
INFO [Line 30] : conditional_expression => logical_OR_expression
INFO [Line 30] : assignment_expression => conditional_expression
INFO [Line 30] : initialiser => assignment_expression
INFO [Line 30] : init_declarator => declarator = initialiser
INFO [Line 30] : init_declarator_list => init_declarator
INFO [Line 30] : init_declarator_list_opt => init_declarator_list
INFO [Line 30] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 30] : block_item => declaration
INFO [Line 30] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 31  --------------------

INFO [Line 31] : type_specifier => _Bool
INFO [Line 31] : declaration_specifiers_opt => epsilon 
INFO [Line 31] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 31] : pointer_opt => epsilon
INFO [Line 31] : direct_declarator => IDENTIFIER
				IDENTIFIER = n5
INFO [Line 31] : declarator => pointer_opt direct_declarator
INFO [Line 31] : unary_operator => !
INFO [Line 31] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
INFO [Line 31] : postfix_expression => primary_expression
INFO [Line 31] : unary_expression => postfix_expression
INFO [Line 31] : cast_expression => unary_expression
INFO [Line 31] : unary_expression => unary_operator cast_expression
INFO [Line 31] : cast_expression => unary_expression
INFO [Line 31] : multiplicative_expression => cast_expression
INFO [Line 31] : additive_expression => multiplicative_expression
INFO [Line 31] : shift_expression => additive_expression
INFO [Line 31] : relational_expression => shift_expression
INFO [Line 31] : equality_expression => relational_expression
INFO [Line 31] : AND_expression => equality_expression
INFO [Line 31] : exclusive_OR_expression => AND_expression
INFO [Line 31] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 31] : logical_AND_expression => inclusive_OR_expression
INFO [Line 31] : logical_OR_expression => logical_AND_expression
INFO [Line 31] : conditional_expression => logical_OR_expression
INFO [Line 31] : assignment_expression => conditional_expression
INFO [Line 31] : initialiser => assignment_expression
INFO [Line 31] : init_declarator => declarator = initialiser
INFO [Line 31] : init_declarator_list => init_declarator
INFO [Line 31] : init_declarator_list_opt => init_declarator_list
INFO [Line 31] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 31] : block_item => declaration
INFO [Line 31] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 32  --------------------

INFO [Line 32] : type_specifier => double
INFO [Line 32] : type_specifier => _Complex
INFO [Line 32] : declaration_specifiers_opt => epsilon 
INFO [Line 32] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 32] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 32] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 32] : pointer_opt => epsilon
INFO [Line 32] : direct_declarator => IDENTIFIER
				IDENTIFIER = n6
INFO [Line 32] : declarator => pointer_opt direct_declarator
INFO [Line 32] : init_declarator => declarator
INFO [Line 32] : init_declarator_list => init_declarator
INFO [Line 32] : init_declarator_list_opt => init_declarator_list
INFO [Line 32] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 32] : block_item => declaration
INFO [Line 32] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 33  --------------------

INFO [Line 33] : type_specifier => double
INFO [Line 33] : type_specifier => _Imaginary
INFO [Line 33] : declaration_specifiers_opt => epsilon 
INFO [Line 33] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 33] : declaration_specifiers_opt => declaration_specifiers
INFO [Line 33] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 33] : pointer_opt => epsilon
INFO [Line 33] : direct_declarator => IDENTIFIER
				IDENTIFIER = n7
INFO [Line 33] : declarator => pointer_opt direct_declarator
INFO [Line 33] : init_declarator => declarator
INFO [Line 33] : init_declarator_list => init_declarator
INFO [Line 33] : init_declarator_list_opt => init_declarator_list
INFO [Line 33] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 33] : block_item => declaration
INFO [Line 33] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 34  --------------------


-------------------- Parsing Line No. 35  --------------------

INFO [Line 35] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 35] : postfix_expression => primary_expression
INFO [Line 35] : unary_expression => postfix_expression
INFO [Line 35] : assignment_operator => =
INFO [Line 35] : type_specifier => int
INFO [Line 35] : specifier_qualifier_list_opt => epsilon
INFO [Line 35] : specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
INFO [Line 35] : type_name => specifier_qualifier_list
INFO [Line 35] : primary_expression => IDENTIFIER
				IDENTIFIER = c
INFO [Line 35] : postfix_expression => primary_expression
INFO [Line 35] : unary_expression => postfix_expression
INFO [Line 35] : cast_expression => unary_expression
INFO [Line 35] : cast_expression => ( type_name ) cast_expression
INFO [Line 35] : multiplicative_expression => cast_expression
INFO [Line 35] : additive_expression => multiplicative_expression
INFO [Line 35] : shift_expression => additive_expression
INFO [Line 35] : relational_expression => shift_expression
INFO [Line 35] : equality_expression => relational_expression
INFO [Line 35] : AND_expression => equality_expression
INFO [Line 35] : exclusive_OR_expression => AND_expression
INFO [Line 35] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 35] : logical_AND_expression => inclusive_OR_expression
INFO [Line 35] : logical_OR_expression => logical_AND_expression
INFO [Line 35] : conditional_expression => logical_OR_expression
INFO [Line 35] : assignment_expression => conditional_expression
INFO [Line 35] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 35] : expression => assignment_expression
INFO [Line 35] : expression_opt => expression
INFO [Line 35] : expression_statement => expression_opt ;
INFO [Line 35] : statement => expression_statement
INFO [Line 35] : block_item => statement
INFO [Line 35] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 36  --------------------

INFO [Line 36] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 36] : postfix_expression => primary_expression
INFO [Line 36] : unary_expression => postfix_expression
INFO [Line 36] : assignment_operator => =
INFO [Line 36] : type_specifier => int
INFO [Line 36] : specifier_qualifier_list_opt => epsilon
INFO [Line 36] : specifier_qualifier_list => type_specifier specifier_qualifier_list_opt
INFO [Line 36] : type_name => specifier_qualifier_list
INFO [Line 36] : unary_expression => sizeof ( type_name )
INFO [Line 36] : cast_expression => unary_expression
INFO [Line 36] : multiplicative_expression => cast_expression
INFO [Line 36] : additive_expression => multiplicative_expression
INFO [Line 36] : shift_expression => additive_expression
INFO [Line 36] : relational_expression => shift_expression
INFO [Line 36] : equality_expression => relational_expression
INFO [Line 36] : AND_expression => equality_expression
INFO [Line 36] : exclusive_OR_expression => AND_expression
INFO [Line 36] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 36] : logical_AND_expression => inclusive_OR_expression
INFO [Line 36] : logical_OR_expression => logical_AND_expression
INFO [Line 36] : conditional_expression => logical_OR_expression
INFO [Line 36] : assignment_expression => conditional_expression
INFO [Line 36] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 36] : expression => assignment_expression
INFO [Line 36] : expression_opt => expression
INFO [Line 36] : expression_statement => expression_opt ;
INFO [Line 36] : statement => expression_statement
INFO [Line 36] : block_item => statement
INFO [Line 36] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 37  --------------------

INFO [Line 37] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 37] : postfix_expression => primary_expression
INFO [Line 37] : unary_expression => postfix_expression
INFO [Line 37] : assignment_operator => =
INFO [Line 37] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 37] : postfix_expression => primary_expression
INFO [Line 37] : unary_expression => postfix_expression
INFO [Line 37] : unary_expression => sizeof unary_expression
INFO [Line 37] : cast_expression => unary_expression
INFO [Line 37] : multiplicative_expression => cast_expression
INFO [Line 37] : additive_expression => multiplicative_expression
INFO [Line 37] : shift_expression => additive_expression
INFO [Line 37] : relational_expression => shift_expression
INFO [Line 37] : equality_expression => relational_expression
INFO [Line 37] : AND_expression => equality_expression
INFO [Line 37] : exclusive_OR_expression => AND_expression
INFO [Line 37] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 37] : logical_AND_expression => inclusive_OR_expression
INFO [Line 37] : logical_OR_expression => logical_AND_expression
INFO [Line 37] : conditional_expression => logical_OR_expression
INFO [Line 37] : assignment_expression => conditional_expression
INFO [Line 37] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 37] : expression => assignment_expression
INFO [Line 37] : expression_opt => expression
INFO [Line 37] : expression_statement => expression_opt ;
INFO [Line 37] : statement => expression_statement
INFO [Line 37] : block_item => statement
INFO [Line 37] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 38  --------------------


-------------------- Parsing Line No. 39  --------------------

INFO [Line 39] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 39] : postfix_expression => primary_expression
INFO [Line 39] : unary_expression => postfix_expression
INFO [Line 39] : assignment_operator => *=
INFO [Line 39] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 39] : postfix_expression => primary_expression
INFO [Line 39] : unary_expression => postfix_expression
INFO [Line 39] : cast_expression => unary_expression
INFO [Line 39] : multiplicative_expression => cast_expression
INFO [Line 39] : additive_expression => multiplicative_expression
INFO [Line 39] : shift_expression => additive_expression
INFO [Line 39] : relational_expression => shift_expression
INFO [Line 39] : equality_expression => relational_expression
INFO [Line 39] : AND_expression => equality_expression
INFO [Line 39] : exclusive_OR_expression => AND_expression
INFO [Line 39] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 39] : logical_AND_expression => inclusive_OR_expression
INFO [Line 39] : logical_OR_expression => logical_AND_expression
INFO [Line 39] : conditional_expression => logical_OR_expression
INFO [Line 39] : assignment_expression => conditional_expression
INFO [Line 39] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 39] : expression => assignment_expression
INFO [Line 39] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 39] : postfix_expression => primary_expression
INFO [Line 39] : unary_expression => postfix_expression
INFO [Line 39] : assignment_operator => /=
INFO [Line 39] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 39] : postfix_expression => primary_expression
INFO [Line 39] : unary_expression => postfix_expression
INFO [Line 39] : cast_expression => unary_expression
INFO [Line 39] : multiplicative_expression => cast_expression
INFO [Line 39] : additive_expression => multiplicative_expression
INFO [Line 39] : shift_expression => additive_expression
INFO [Line 39] : relational_expression => shift_expression
INFO [Line 39] : equality_expression => relational_expression
INFO [Line 39] : AND_expression => equality_expression
INFO [Line 39] : exclusive_OR_expression => AND_expression
INFO [Line 39] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 39] : logical_AND_expression => inclusive_OR_expression
INFO [Line 39] : logical_OR_expression => logical_AND_expression
INFO [Line 39] : conditional_expression => logical_OR_expression
INFO [Line 39] : assignment_expression => conditional_expression
INFO [Line 39] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 39] : expression => expression , assignment_expression
INFO [Line 39] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 39] : postfix_expression => primary_expression
INFO [Line 39] : unary_expression => postfix_expression
INFO [Line 39] : assignment_operator => %=
INFO [Line 39] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 39] : postfix_expression => primary_expression
INFO [Line 39] : unary_expression => postfix_expression
INFO [Line 39] : cast_expression => unary_expression
INFO [Line 39] : multiplicative_expression => cast_expression
INFO [Line 39] : additive_expression => multiplicative_expression
INFO [Line 39] : shift_expression => additive_expression
INFO [Line 39] : relational_expression => shift_expression
INFO [Line 39] : equality_expression => relational_expression
INFO [Line 39] : AND_expression => equality_expression
INFO [Line 39] : exclusive_OR_expression => AND_expression
INFO [Line 39] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 39] : logical_AND_expression => inclusive_OR_expression
INFO [Line 39] : logical_OR_expression => logical_AND_expression
INFO [Line 39] : conditional_expression => logical_OR_expression
INFO [Line 39] : assignment_expression => conditional_expression
INFO [Line 39] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 39] : expression => expression , assignment_expression
INFO [Line 39] : expression_opt => expression
INFO [Line 39] : expression_statement => expression_opt ;
INFO [Line 39] : statement => expression_statement
INFO [Line 39] : block_item => statement
INFO [Line 39] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 40  --------------------

INFO [Line 40] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 40] : postfix_expression => primary_expression
INFO [Line 40] : unary_expression => postfix_expression
INFO [Line 40] : assignment_operator => += 
INFO [Line 40] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 40] : postfix_expression => primary_expression
INFO [Line 40] : unary_expression => postfix_expression
INFO [Line 40] : assignment_operator => -= 
INFO [Line 40] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 40] : postfix_expression => primary_expression
INFO [Line 40] : unary_expression => postfix_expression
INFO [Line 40] : cast_expression => unary_expression
INFO [Line 40] : multiplicative_expression => cast_expression
INFO [Line 40] : additive_expression => multiplicative_expression
INFO [Line 40] : shift_expression => additive_expression
INFO [Line 40] : relational_expression => shift_expression
INFO [Line 40] : equality_expression => relational_expression
INFO [Line 40] : AND_expression => equality_expression
INFO [Line 40] : exclusive_OR_expression => AND_expression
INFO [Line 40] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 40] : logical_AND_expression => inclusive_OR_expression
INFO [Line 40] : logical_OR_expression => logical_AND_expression
INFO [Line 40] : conditional_expression => logical_OR_expression
INFO [Line 40] : assignment_expression => conditional_expression
INFO [Line 40] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 40] : expression => assignment_expression
INFO [Line 40] : primary_expression => ( expression )
INFO [Line 40] : postfix_expression => primary_expression
INFO [Line 40] : unary_expression => postfix_expression
INFO [Line 40] : cast_expression => unary_expression
INFO [Line 40] : multiplicative_expression => cast_expression
INFO [Line 40] : additive_expression => multiplicative_expression
INFO [Line 40] : shift_expression => additive_expression
INFO [Line 40] : relational_expression => shift_expression
INFO [Line 40] : equality_expression => relational_expression
INFO [Line 40] : AND_expression => equality_expression
INFO [Line 40] : exclusive_OR_expression => AND_expression
INFO [Line 40] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 40] : logical_AND_expression => inclusive_OR_expression
INFO [Line 40] : logical_OR_expression => logical_AND_expression
INFO [Line 40] : conditional_expression => logical_OR_expression
INFO [Line 40] : assignment_expression => conditional_expression
INFO [Line 40] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 40] : expression => assignment_expression
INFO [Line 40] : expression_opt => expression
INFO [Line 40] : expression_statement => expression_opt ;
INFO [Line 40] : statement => expression_statement
INFO [Line 40] : block_item => statement
INFO [Line 40] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 41  --------------------

INFO [Line 41] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 41] : postfix_expression => primary_expression
INFO [Line 41] : unary_expression => postfix_expression
INFO [Line 41] : assignment_operator => <<=
INFO [Line 41] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 41] : postfix_expression => primary_expression
INFO [Line 41] : unary_expression => postfix_expression
INFO [Line 41] : assignment_operator => >>=
INFO [Line 41] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 41] : postfix_expression => primary_expression
INFO [Line 41] : unary_expression => postfix_expression
INFO [Line 41] : cast_expression => unary_expression
INFO [Line 41] : multiplicative_expression => cast_expression
INFO [Line 41] : additive_expression => multiplicative_expression
INFO [Line 41] : shift_expression => additive_expression
INFO [Line 41] : relational_expression => shift_expression
INFO [Line 41] : equality_expression => relational_expression
INFO [Line 41] : AND_expression => equality_expression
INFO [Line 41] : exclusive_OR_expression => AND_expression
INFO [Line 41] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 41] : logical_AND_expression => inclusive_OR_expression
INFO [Line 41] : logical_OR_expression => logical_AND_expression
INFO [Line 41] : conditional_expression => logical_OR_expression
INFO [Line 41] : assignment_expression => conditional_expression
INFO [Line 41] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 41] : expression => assignment_expression
INFO [Line 41] : primary_expression => ( expression )
INFO [Line 41] : postfix_expression => primary_expression
INFO [Line 41] : unary_expression => postfix_expression
INFO [Line 41] : cast_expression => unary_expression
INFO [Line 41] : multiplicative_expression => cast_expression
INFO [Line 41] : additive_expression => multiplicative_expression
INFO [Line 41] : shift_expression => additive_expression
INFO [Line 41] : relational_expression => shift_expression
INFO [Line 41] : equality_expression => relational_expression
INFO [Line 41] : AND_expression => equality_expression
INFO [Line 41] : exclusive_OR_expression => AND_expression
INFO [Line 41] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 41] : logical_AND_expression => inclusive_OR_expression
INFO [Line 41] : logical_OR_expression => logical_AND_expression
INFO [Line 41] : conditional_expression => logical_OR_expression
INFO [Line 41] : assignment_expression => conditional_expression
INFO [Line 41] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 41] : expression => assignment_expression
INFO [Line 41] : expression_opt => expression
INFO [Line 41] : expression_statement => expression_opt ;
INFO [Line 41] : statement => expression_statement
INFO [Line 41] : block_item => statement
INFO [Line 41] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 42  --------------------

INFO [Line 42] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 42] : postfix_expression => primary_expression
INFO [Line 42] : unary_expression => postfix_expression
INFO [Line 42] : assignment_operator => &=
INFO [Line 42] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 42] : postfix_expression => primary_expression
INFO [Line 42] : unary_expression => postfix_expression
INFO [Line 42] : assignment_operator => |=
INFO [Line 42] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 42] : postfix_expression => primary_expression
INFO [Line 42] : unary_expression => postfix_expression
INFO [Line 42] : assignment_operator => ^=
INFO [Line 42] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 42] : postfix_expression => primary_expression
INFO [Line 42] : unary_expression => postfix_expression
INFO [Line 42] : cast_expression => unary_expression
INFO [Line 42] : multiplicative_expression => cast_expression
INFO [Line 42] : additive_expression => multiplicative_expression
INFO [Line 42] : shift_expression => additive_expression
INFO [Line 42] : relational_expression => shift_expression
INFO [Line 42] : equality_expression => relational_expression
INFO [Line 42] : AND_expression => equality_expression
INFO [Line 42] : exclusive_OR_expression => AND_expression
INFO [Line 42] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 42] : logical_AND_expression => inclusive_OR_expression
INFO [Line 42] : logical_OR_expression => logical_AND_expression
INFO [Line 42] : conditional_expression => logical_OR_expression
INFO [Line 42] : assignment_expression => conditional_expression
INFO [Line 42] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 42] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 42] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 42] : expression => assignment_expression
INFO [Line 42] : expression_opt => expression
INFO [Line 42] : expression_statement => expression_opt ;
INFO [Line 42] : statement => expression_statement
INFO [Line 42] : block_item => statement
INFO [Line 42] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 43  --------------------


-------------------- Parsing Line No. 44  --------------------

INFO [Line 44] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : assignment_operator => =
INFO [Line 44] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => relational_expression
INFO [Line 44] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => equality_expression == relational_expression
INFO [Line 44] : AND_expression => equality_expression
INFO [Line 44] : exclusive_OR_expression => AND_expression
INFO [Line 44] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 44] : logical_AND_expression => inclusive_OR_expression
INFO [Line 44] : logical_OR_expression => logical_AND_expression
INFO [Line 44] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => relational_expression
INFO [Line 44] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => equality_expression == relational_expression
INFO [Line 44] : AND_expression => equality_expression
INFO [Line 44] : exclusive_OR_expression => AND_expression
INFO [Line 44] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 44] : logical_AND_expression => inclusive_OR_expression
INFO [Line 44] : logical_OR_expression => logical_OR_expression || logical_AND_expression
INFO [Line 44] : conditional_expression => logical_OR_expression
INFO [Line 44] : assignment_expression => conditional_expression
INFO [Line 44] : expression => assignment_expression
INFO [Line 44] : primary_expression => ( expression )
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => relational_expression
INFO [Line 44] : AND_expression => equality_expression
INFO [Line 44] : exclusive_OR_expression => AND_expression
INFO [Line 44] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 44] : logical_AND_expression => inclusive_OR_expression
INFO [Line 44] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => relational_expression
INFO [Line 44] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => equality_expression != relational_expression
INFO [Line 44] : AND_expression => equality_expression
INFO [Line 44] : exclusive_OR_expression => AND_expression
INFO [Line 44] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 44] : logical_AND_expression => logical_AND_expression && inclusive_OR_expression
INFO [Line 44] : logical_OR_expression => logical_AND_expression
INFO [Line 44] : conditional_expression => logical_OR_expression
INFO [Line 44] : assignment_expression => conditional_expression
INFO [Line 44] : expression => assignment_expression
INFO [Line 44] : primary_expression => ( expression )
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => relational_expression
INFO [Line 44] : AND_expression => equality_expression
INFO [Line 44] : exclusive_OR_expression => AND_expression
INFO [Line 44] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 44] : logical_AND_expression => inclusive_OR_expression
INFO [Line 44] : logical_OR_expression => logical_AND_expression
INFO [Line 44] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : assignment_operator => =
INFO [Line 44] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => relational_expression
INFO [Line 44] : AND_expression => equality_expression
INFO [Line 44] : exclusive_OR_expression => AND_expression
INFO [Line 44] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 44] : logical_AND_expression => inclusive_OR_expression
INFO [Line 44] : logical_OR_expression => logical_AND_expression
INFO [Line 44] : conditional_expression => logical_OR_expression
INFO [Line 44] : assignment_expression => conditional_expression
INFO [Line 44] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 44] : expression => assignment_expression
INFO [Line 44] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 44] : postfix_expression => primary_expression
INFO [Line 44] : unary_expression => postfix_expression
INFO [Line 44] : cast_expression => unary_expression
INFO [Line 44] : multiplicative_expression => cast_expression
INFO [Line 44] : additive_expression => multiplicative_expression
INFO [Line 44] : shift_expression => additive_expression
INFO [Line 44] : relational_expression => shift_expression
INFO [Line 44] : equality_expression => relational_expression
INFO [Line 44] : AND_expression => equality_expression
INFO [Line 44] : exclusive_OR_expression => AND_expression
INFO [Line 44] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 44] : logical_AND_expression => inclusive_OR_expression
INFO [Line 44] : logical_OR_expression => logical_AND_expression
INFO [Line 44] : conditional_expression => logical_OR_expression
INFO [Line 44] : conditional_expression => logical_OR_expression ? expression : conditional_expression
INFO [Line 44] : assignment_expression => conditional_expression
INFO [Line 44] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 44] : expression => assignment_expression
INFO [Line 44] : expression_opt => expression
INFO [Line 44] : expression_statement => expression_opt ;
INFO [Line 44] : statement => expression_statement
INFO [Line 44] : block_item => statement
INFO [Line 44] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 45  --------------------

INFO [Line 45] : primary_expression => IDENTIFIER
				IDENTIFIER = a
INFO [Line 45] : postfix_expression => primary_expression
INFO [Line 45] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 45] : postfix_expression => primary_expression
INFO [Line 45] : unary_expression => postfix_expression
INFO [Line 45] : cast_expression => unary_expression
INFO [Line 45] : multiplicative_expression => cast_expression
INFO [Line 45] : additive_expression => multiplicative_expression
INFO [Line 45] : shift_expression => additive_expression
INFO [Line 45] : relational_expression => shift_expression
INFO [Line 45] : equality_expression => relational_expression
INFO [Line 45] : AND_expression => equality_expression
INFO [Line 45] : exclusive_OR_expression => AND_expression
INFO [Line 45] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 45] : logical_AND_expression => inclusive_OR_expression
INFO [Line 45] : logical_OR_expression => logical_AND_expression
INFO [Line 45] : conditional_expression => logical_OR_expression
INFO [Line 45] : assignment_expression => conditional_expression
INFO [Line 45] : expression => assignment_expression
INFO [Line 45] : postfix_expression => postfix_expression [ expression ]
INFO [Line 45] : unary_expression => postfix_expression
INFO [Line 45] : assignment_operator => =
INFO [Line 45] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 45] : postfix_expression => primary_expression
INFO [Line 45] : unary_expression => postfix_expression
INFO [Line 45] : cast_expression => unary_expression
INFO [Line 45] : multiplicative_expression => cast_expression
INFO [Line 45] : additive_expression => multiplicative_expression
INFO [Line 45] : shift_expression => additive_expression
INFO [Line 45] : relational_expression => shift_expression
INFO [Line 45] : equality_expression => relational_expression
INFO [Line 45] : AND_expression => equality_expression
INFO [Line 45] : exclusive_OR_expression => AND_expression
INFO [Line 45] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 45] : logical_AND_expression => inclusive_OR_expression
INFO [Line 45] : logical_OR_expression => logical_AND_expression
INFO [Line 45] : conditional_expression => logical_OR_expression
INFO [Line 45] : assignment_expression => conditional_expression
INFO [Line 45] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 45] : expression => assignment_expression
INFO [Line 45] : expression_opt => expression
INFO [Line 45] : expression_statement => expression_opt ;
INFO [Line 45] : statement => expression_statement
INFO [Line 45] : block_item => statement
INFO [Line 45] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 46  --------------------


-------------------- Parsing Line No. 47  --------------------


-------------------- Parsing Line No. 48  --------------------

INFO [Line 48] : primary_expression => IDENTIFIER
				IDENTIFIER = n3
INFO [Line 48] : postfix_expression => primary_expression
INFO [Line 48] : unary_expression => postfix_expression
INFO [Line 48] : cast_expression => unary_expression
INFO [Line 48] : multiplicative_expression => cast_expression
INFO [Line 48] : additive_expression => multiplicative_expression
INFO [Line 48] : shift_expression => additive_expression
INFO [Line 48] : relational_expression => shift_expression
INFO [Line 48] : primary_expression => IDENTIFIER
				IDENTIFIER = n4
INFO [Line 48] : postfix_expression => primary_expression
INFO [Line 48] : unary_expression => postfix_expression
INFO [Line 48] : cast_expression => unary_expression
INFO [Line 48] : multiplicative_expression => cast_expression
INFO [Line 48] : additive_expression => multiplicative_expression
INFO [Line 48] : shift_expression => additive_expression
INFO [Line 48] : relational_expression => relational_expression < shift_expression
INFO [Line 48] : equality_expression => relational_expression
INFO [Line 48] : AND_expression => equality_expression
INFO [Line 48] : exclusive_OR_expression => AND_expression
INFO [Line 48] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 48] : logical_AND_expression => inclusive_OR_expression
INFO [Line 48] : logical_OR_expression => logical_AND_expression
INFO [Line 48] : conditional_expression => logical_OR_expression
INFO [Line 48] : assignment_expression => conditional_expression
INFO [Line 48] : expression => assignment_expression

-------------------- Parsing Line No. 49  --------------------


-------------------- Parsing Line No. 50  --------------------

INFO [Line 50] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 50] : postfix_expression => primary_expression
INFO [Line 50] : unary_expression => postfix_expression
INFO [Line 50] : cast_expression => unary_expression
INFO [Line 50] : multiplicative_expression => cast_expression
INFO [Line 50] : additive_expression => multiplicative_expression
INFO [Line 50] : shift_expression => additive_expression
INFO [Line 50] : relational_expression => shift_expression
INFO [Line 50] : equality_expression => relational_expression
INFO [Line 50] : AND_expression => equality_expression
INFO [Line 50] : exclusive_OR_expression => AND_expression
INFO [Line 50] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 50] : logical_AND_expression => inclusive_OR_expression
INFO [Line 50] : logical_OR_expression => logical_AND_expression
INFO [Line 50] : conditional_expression => logical_OR_expression
INFO [Line 50] : assignment_expression => conditional_expression
INFO [Line 50] : expression => assignment_expression

-------------------- Parsing Line No. 51  --------------------

INFO [Line 51] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
INFO [Line 51] : postfix_expression => primary_expression
INFO [Line 51] : unary_expression => postfix_expression
INFO [Line 51] : cast_expression => unary_expression
INFO [Line 51] : multiplicative_expression => cast_expression
INFO [Line 51] : additive_expression => multiplicative_expression
INFO [Line 51] : shift_expression => additive_expression
INFO [Line 51] : relational_expression => shift_expression
INFO [Line 51] : equality_expression => relational_expression
INFO [Line 51] : AND_expression => equality_expression
INFO [Line 51] : exclusive_OR_expression => AND_expression
INFO [Line 51] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 51] : logical_AND_expression => inclusive_OR_expression
INFO [Line 51] : logical_OR_expression => logical_AND_expression
INFO [Line 51] : conditional_expression => logical_OR_expression
INFO [Line 51] : constant_expression => conditional_expression

-------------------- Parsing Line No. 52  --------------------

INFO [Line 52] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 52] : postfix_expression => primary_expression
INFO [Line 52] : postfix_expression => postfix_expression ++
INFO [Line 52] : unary_expression => postfix_expression
INFO [Line 52] : cast_expression => unary_expression
INFO [Line 52] : multiplicative_expression => cast_expression
INFO [Line 52] : additive_expression => multiplicative_expression
INFO [Line 52] : shift_expression => additive_expression
INFO [Line 52] : relational_expression => shift_expression
INFO [Line 52] : equality_expression => relational_expression
INFO [Line 52] : AND_expression => equality_expression
INFO [Line 52] : exclusive_OR_expression => AND_expression
INFO [Line 52] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 52] : logical_AND_expression => inclusive_OR_expression
INFO [Line 52] : logical_OR_expression => logical_AND_expression
INFO [Line 52] : conditional_expression => logical_OR_expression
INFO [Line 52] : assignment_expression => conditional_expression
INFO [Line 52] : expression => assignment_expression
INFO [Line 52] : expression_opt => expression
INFO [Line 52] : expression_statement => expression_opt ;
INFO [Line 52] : statement => expression_statement
INFO [Line 52] : labeled_statement => case constant_expression : statement
INFO [Line 52] : statement => labeled_statement
INFO [Line 52] : block_item => statement
INFO [Line 52] : block_item_list => block_item

-------------------- Parsing Line No. 53  --------------------

INFO [Line 53] : jump_statement => break ;
INFO [Line 53] : statement => jump_statement
INFO [Line 53] : block_item => statement
INFO [Line 53] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 54  --------------------


-------------------- Parsing Line No. 55  --------------------

INFO [Line 55] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 55] : postfix_expression => primary_expression
INFO [Line 55] : postfix_expression => postfix_expression --
INFO [Line 55] : unary_expression => postfix_expression
INFO [Line 55] : cast_expression => unary_expression
INFO [Line 55] : multiplicative_expression => cast_expression
INFO [Line 55] : additive_expression => multiplicative_expression
INFO [Line 55] : shift_expression => additive_expression
INFO [Line 55] : relational_expression => shift_expression
INFO [Line 55] : equality_expression => relational_expression
INFO [Line 55] : AND_expression => equality_expression
INFO [Line 55] : exclusive_OR_expression => AND_expression
INFO [Line 55] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 55] : logical_AND_expression => inclusive_OR_expression
INFO [Line 55] : logical_OR_expression => logical_AND_expression
INFO [Line 55] : conditional_expression => logical_OR_expression
INFO [Line 55] : assignment_expression => conditional_expression
INFO [Line 55] : expression => assignment_expression
INFO [Line 55] : expression_opt => expression
INFO [Line 55] : expression_statement => expression_opt ;
INFO [Line 55] : statement => expression_statement
INFO [Line 55] : labeled_statement => default : statement
INFO [Line 55] : statement => labeled_statement
INFO [Line 55] : block_item => statement
INFO [Line 55] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 56  --------------------

INFO [Line 56] : block_item_list_opt => block_item_list
INFO [Line 56] : compound_statement => { block_item_list_opt }
INFO [Line 56] : statement => compound_statement
INFO [Line 56] : selection_statement => switch ( expression ) statement
INFO [Line 56] : statement => selection_statement
INFO [Line 56] : block_item => statement
INFO [Line 56] : block_item_list => block_item

-------------------- Parsing Line No. 57  --------------------


-------------------- Parsing Line No. 58  --------------------

INFO [Line 58] : block_item_list_opt => block_item_list
INFO [Line 58] : compound_statement => { block_item_list_opt }
INFO [Line 58] : statement => compound_statement
INFO [Line 58] : primary_expression => IDENTIFIER
				IDENTIFIER = n3
INFO [Line 58] : postfix_expression => primary_expression
INFO [Line 58] : unary_expression => postfix_expression
INFO [Line 58] : cast_expression => unary_expression
INFO [Line 58] : multiplicative_expression => cast_expression
INFO [Line 58] : additive_expression => multiplicative_expression
INFO [Line 58] : shift_expression => additive_expression
INFO [Line 58] : relational_expression => shift_expression
INFO [Line 58] : primary_expression => IDENTIFIER
				IDENTIFIER = n4
INFO [Line 58] : postfix_expression => primary_expression
INFO [Line 58] : unary_expression => postfix_expression
INFO [Line 58] : cast_expression => unary_expression
INFO [Line 58] : multiplicative_expression => cast_expression
INFO [Line 58] : additive_expression => multiplicative_expression
INFO [Line 58] : shift_expression => additive_expression
INFO [Line 58] : relational_expression => relational_expression > shift_expression
INFO [Line 58] : equality_expression => relational_expression
INFO [Line 58] : AND_expression => equality_expression
INFO [Line 58] : exclusive_OR_expression => AND_expression
INFO [Line 58] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 58] : logical_AND_expression => inclusive_OR_expression
INFO [Line 58] : logical_OR_expression => logical_AND_expression
INFO [Line 58] : conditional_expression => logical_OR_expression
INFO [Line 58] : assignment_expression => conditional_expression
INFO [Line 58] : expression => assignment_expression

-------------------- Parsing Line No. 59  --------------------

INFO [Line 59] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 59] : postfix_expression => primary_expression
INFO [Line 59] : unary_expression => postfix_expression
INFO [Line 59] : cast_expression => unary_expression
INFO [Line 59] : multiplicative_expression => cast_expression
INFO [Line 59] : additive_expression => multiplicative_expression
INFO [Line 59] : shift_expression => additive_expression
INFO [Line 59] : relational_expression => shift_expression
INFO [Line 59] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 59] : postfix_expression => primary_expression
INFO [Line 59] : unary_expression => postfix_expression
INFO [Line 59] : cast_expression => unary_expression
INFO [Line 59] : multiplicative_expression => cast_expression
INFO [Line 59] : additive_expression => multiplicative_expression
INFO [Line 59] : shift_expression => additive_expression
INFO [Line 59] : relational_expression => relational_expression >= shift_expression
INFO [Line 59] : equality_expression => relational_expression
INFO [Line 59] : AND_expression => equality_expression
INFO [Line 59] : exclusive_OR_expression => AND_expression
INFO [Line 59] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 59] : logical_AND_expression => inclusive_OR_expression
INFO [Line 59] : logical_OR_expression => logical_AND_expression
INFO [Line 59] : conditional_expression => logical_OR_expression
INFO [Line 59] : assignment_expression => conditional_expression
INFO [Line 59] : expression => assignment_expression

-------------------- Parsing Line No. 60  --------------------

INFO [Line 60] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 60] : postfix_expression => primary_expression
INFO [Line 60] : postfix_expression => postfix_expression ++
INFO [Line 60] : unary_expression => postfix_expression
INFO [Line 60] : cast_expression => unary_expression
INFO [Line 60] : multiplicative_expression => cast_expression
INFO [Line 60] : additive_expression => multiplicative_expression
INFO [Line 60] : shift_expression => additive_expression
INFO [Line 60] : relational_expression => shift_expression
INFO [Line 60] : equality_expression => relational_expression
INFO [Line 60] : AND_expression => equality_expression
INFO [Line 60] : exclusive_OR_expression => AND_expression
INFO [Line 60] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 60] : logical_AND_expression => inclusive_OR_expression
INFO [Line 60] : logical_OR_expression => logical_AND_expression
INFO [Line 60] : conditional_expression => logical_OR_expression
INFO [Line 60] : assignment_expression => conditional_expression
INFO [Line 60] : expression => assignment_expression
INFO [Line 60] : expression_opt => expression
INFO [Line 60] : expression_statement => expression_opt ;
INFO [Line 60] : statement => expression_statement

-------------------- Parsing Line No. 61  --------------------

INFO [Line 61] : selection_statement => if ( expression ) statement
INFO [Line 61] : statement => selection_statement
INFO [Line 61] : block_item => statement
INFO [Line 61] : block_item_list => block_item
INFO [Line 61] : block_item_list_opt => block_item_list
INFO [Line 61] : compound_statement => { block_item_list_opt }
INFO [Line 61] : statement => compound_statement

-------------------- Parsing Line No. 62  --------------------

INFO [Line 62] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 62] : postfix_expression => primary_expression
INFO [Line 62] : unary_expression => postfix_expression
INFO [Line 62] : cast_expression => unary_expression
INFO [Line 62] : multiplicative_expression => cast_expression
INFO [Line 62] : additive_expression => multiplicative_expression
INFO [Line 62] : shift_expression => additive_expression
INFO [Line 62] : relational_expression => shift_expression
INFO [Line 62] : primary_expression => IDENTIFIER
				IDENTIFIER = n1
INFO [Line 62] : postfix_expression => primary_expression
INFO [Line 62] : unary_expression => postfix_expression
INFO [Line 62] : cast_expression => unary_expression
INFO [Line 62] : multiplicative_expression => cast_expression
INFO [Line 62] : additive_expression => multiplicative_expression
INFO [Line 62] : shift_expression => additive_expression
INFO [Line 62] : relational_expression => relational_expression <= shift_expression
INFO [Line 62] : equality_expression => relational_expression
INFO [Line 62] : AND_expression => equality_expression
INFO [Line 62] : exclusive_OR_expression => AND_expression
INFO [Line 62] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 62] : logical_AND_expression => inclusive_OR_expression
INFO [Line 62] : logical_OR_expression => logical_AND_expression
INFO [Line 62] : conditional_expression => logical_OR_expression
INFO [Line 62] : assignment_expression => conditional_expression
INFO [Line 62] : expression => assignment_expression

-------------------- Parsing Line No. 63  --------------------

INFO [Line 63] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 63] : postfix_expression => primary_expression
INFO [Line 63] : postfix_expression => postfix_expression ++
INFO [Line 63] : unary_expression => postfix_expression
INFO [Line 63] : cast_expression => unary_expression
INFO [Line 63] : multiplicative_expression => cast_expression
INFO [Line 63] : additive_expression => multiplicative_expression
INFO [Line 63] : shift_expression => additive_expression
INFO [Line 63] : relational_expression => shift_expression
INFO [Line 63] : equality_expression => relational_expression
INFO [Line 63] : AND_expression => equality_expression
INFO [Line 63] : exclusive_OR_expression => AND_expression
INFO [Line 63] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 63] : logical_AND_expression => inclusive_OR_expression
INFO [Line 63] : logical_OR_expression => logical_AND_expression
INFO [Line 63] : conditional_expression => logical_OR_expression
INFO [Line 63] : assignment_expression => conditional_expression
INFO [Line 63] : expression => assignment_expression
INFO [Line 63] : expression_opt => expression
INFO [Line 63] : expression_statement => expression_opt ;
INFO [Line 63] : statement => expression_statement

-------------------- Parsing Line No. 64  --------------------

INFO [Line 64] : selection_statement => if ( expression ) statement
INFO [Line 64] : statement => selection_statement
INFO [Line 64] : block_item => statement
INFO [Line 64] : block_item_list => block_item
INFO [Line 64] : block_item_list_opt => block_item_list
INFO [Line 64] : compound_statement => { block_item_list_opt }
INFO [Line 64] : statement => compound_statement
INFO [Line 64] : selection_statement => if ( expression ) statement else statement
INFO [Line 64] : statement => selection_statement
INFO [Line 64] : selection_statement => if ( expression ) statement else statement
INFO [Line 64] : statement => selection_statement
INFO [Line 64] : labeled_statement => IDENTIFIER : statement
				IDENTIFIER = RANDOM_LOC
INFO [Line 64] : statement => labeled_statement
INFO [Line 64] : block_item => statement
INFO [Line 64] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 65  --------------------


-------------------- Parsing Line No. 66  --------------------

INFO [Line 66] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 66] : postfix_expression => primary_expression
INFO [Line 66] : postfix_expression => postfix_expression --
INFO [Line 66] : unary_expression => postfix_expression
INFO [Line 66] : cast_expression => unary_expression
INFO [Line 66] : multiplicative_expression => cast_expression
INFO [Line 66] : additive_expression => multiplicative_expression
INFO [Line 66] : shift_expression => additive_expression
INFO [Line 66] : relational_expression => shift_expression
INFO [Line 66] : equality_expression => relational_expression
INFO [Line 66] : AND_expression => equality_expression
INFO [Line 66] : exclusive_OR_expression => AND_expression
INFO [Line 66] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 66] : logical_AND_expression => inclusive_OR_expression
INFO [Line 66] : logical_OR_expression => logical_AND_expression
INFO [Line 66] : conditional_expression => logical_OR_expression
INFO [Line 66] : assignment_expression => conditional_expression
INFO [Line 66] : expression => assignment_expression

-------------------- Parsing Line No. 67  --------------------

INFO [Line 67] : jump_statement => goto IDENTIFIER ;
				IDENTIFIER = RANDOM_LOC
INFO [Line 67] : statement => jump_statement
INFO [Line 67] : iteration_statement => while ( expression ) statement
INFO [Line 67] : statement => iteration_statement
INFO [Line 67] : block_item => statement
INFO [Line 67] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 68  --------------------


-------------------- Parsing Line No. 69  --------------------

INFO [Line 69] : expression_opt => epsilon
INFO [Line 69] : expression_opt => epsilon
INFO [Line 69] : expression_opt => epsilon

-------------------- Parsing Line No. 70  --------------------

INFO [Line 70] : type_specifier => int
INFO [Line 70] : declaration_specifiers_opt => epsilon 
INFO [Line 70] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 70] : pointer_opt => epsilon
INFO [Line 70] : direct_declarator => IDENTIFIER
				IDENTIFIER = i
INFO [Line 70] : declarator => pointer_opt direct_declarator
INFO [Line 70] : init_declarator => declarator
INFO [Line 70] : init_declarator_list => init_declarator
INFO [Line 70] : init_declarator_list_opt => init_declarator_list
INFO [Line 70] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 70] : expression_opt => epsilon
INFO [Line 70] : expression_opt => epsilon

-------------------- Parsing Line No. 71  --------------------

INFO [Line 71] : type_specifier => int
INFO [Line 71] : declaration_specifiers_opt => epsilon 
INFO [Line 71] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 71] : pointer_opt => epsilon
INFO [Line 71] : direct_declarator => IDENTIFIER
				IDENTIFIER = i
INFO [Line 71] : declarator => pointer_opt direct_declarator
INFO [Line 71] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
INFO [Line 71] : postfix_expression => primary_expression
INFO [Line 71] : unary_expression => postfix_expression
INFO [Line 71] : cast_expression => unary_expression
INFO [Line 71] : multiplicative_expression => cast_expression
INFO [Line 71] : additive_expression => multiplicative_expression
INFO [Line 71] : shift_expression => additive_expression
INFO [Line 71] : relational_expression => shift_expression
INFO [Line 71] : equality_expression => relational_expression
INFO [Line 71] : AND_expression => equality_expression
INFO [Line 71] : exclusive_OR_expression => AND_expression
INFO [Line 71] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 71] : logical_AND_expression => inclusive_OR_expression
INFO [Line 71] : logical_OR_expression => logical_AND_expression
INFO [Line 71] : conditional_expression => logical_OR_expression
INFO [Line 71] : assignment_expression => conditional_expression
INFO [Line 71] : initialiser => assignment_expression
INFO [Line 71] : init_declarator => declarator = initialiser
INFO [Line 71] : init_declarator_list => init_declarator
INFO [Line 71] : pointer_opt => epsilon
INFO [Line 71] : direct_declarator => IDENTIFIER
				IDENTIFIER = j
INFO [Line 71] : declarator => pointer_opt direct_declarator
INFO [Line 71] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
INFO [Line 71] : postfix_expression => primary_expression
INFO [Line 71] : unary_expression => postfix_expression
INFO [Line 71] : cast_expression => unary_expression
INFO [Line 71] : multiplicative_expression => cast_expression
INFO [Line 71] : additive_expression => multiplicative_expression
INFO [Line 71] : shift_expression => additive_expression
INFO [Line 71] : relational_expression => shift_expression
INFO [Line 71] : equality_expression => relational_expression
INFO [Line 71] : AND_expression => equality_expression
INFO [Line 71] : exclusive_OR_expression => AND_expression
INFO [Line 71] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 71] : logical_AND_expression => inclusive_OR_expression
INFO [Line 71] : logical_OR_expression => logical_AND_expression
INFO [Line 71] : conditional_expression => logical_OR_expression
INFO [Line 71] : assignment_expression => conditional_expression
INFO [Line 71] : initialiser => assignment_expression
INFO [Line 71] : init_declarator => declarator = initialiser
INFO [Line 71] : init_declarator_list => init_declarator_list , init_declarator
INFO [Line 71] : init_declarator_list_opt => init_declarator_list
INFO [Line 71] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 71] : primary_expression => IDENTIFIER
				IDENTIFIER = i
INFO [Line 71] : postfix_expression => primary_expression
INFO [Line 71] : unary_expression => postfix_expression
INFO [Line 71] : cast_expression => unary_expression
INFO [Line 71] : multiplicative_expression => cast_expression
INFO [Line 71] : additive_expression => multiplicative_expression
INFO [Line 71] : shift_expression => additive_expression
INFO [Line 71] : relational_expression => shift_expression
INFO [Line 71] : equality_expression => relational_expression
INFO [Line 71] : primary_expression => IDENTIFIER
				IDENTIFIER = j
INFO [Line 71] : postfix_expression => primary_expression
INFO [Line 71] : unary_expression => postfix_expression
INFO [Line 71] : cast_expression => unary_expression
INFO [Line 71] : multiplicative_expression => cast_expression
INFO [Line 71] : additive_expression => multiplicative_expression
INFO [Line 71] : shift_expression => additive_expression
INFO [Line 71] : relational_expression => shift_expression
INFO [Line 71] : equality_expression => equality_expression != relational_expression
INFO [Line 71] : AND_expression => equality_expression
INFO [Line 71] : exclusive_OR_expression => AND_expression
INFO [Line 71] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 71] : logical_AND_expression => inclusive_OR_expression
INFO [Line 71] : logical_OR_expression => logical_AND_expression
INFO [Line 71] : conditional_expression => logical_OR_expression
INFO [Line 71] : assignment_expression => conditional_expression
INFO [Line 71] : expression => assignment_expression
INFO [Line 71] : expression_opt => expression
INFO [Line 71] : primary_expression => IDENTIFIER
				IDENTIFIER = i
INFO [Line 71] : postfix_expression => primary_expression
INFO [Line 71] : postfix_expression => postfix_expression ++
INFO [Line 71] : unary_expression => postfix_expression
INFO [Line 71] : cast_expression => unary_expression
INFO [Line 71] : multiplicative_expression => cast_expression
INFO [Line 71] : additive_expression => multiplicative_expression
INFO [Line 71] : shift_expression => additive_expression
INFO [Line 71] : relational_expression => shift_expression
INFO [Line 71] : equality_expression => relational_expression
INFO [Line 71] : AND_expression => equality_expression
INFO [Line 71] : exclusive_OR_expression => AND_expression
INFO [Line 71] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 71] : logical_AND_expression => inclusive_OR_expression
INFO [Line 71] : logical_OR_expression => logical_AND_expression
INFO [Line 71] : conditional_expression => logical_OR_expression
INFO [Line 71] : assignment_expression => conditional_expression
INFO [Line 71] : expression => assignment_expression
INFO [Line 71] : expression_opt => expression

-------------------- Parsing Line No. 72  --------------------

INFO [Line 72] : primary_expression => IDENTIFIER
				IDENTIFIER = j
INFO [Line 72] : postfix_expression => primary_expression
INFO [Line 72] : unary_expression => postfix_expression
INFO [Line 72] : cast_expression => unary_expression
INFO [Line 72] : multiplicative_expression => cast_expression
INFO [Line 72] : additive_expression => multiplicative_expression
INFO [Line 72] : shift_expression => additive_expression
INFO [Line 72] : relational_expression => shift_expression
INFO [Line 72] : equality_expression => relational_expression
INFO [Line 72] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
INFO [Line 72] : postfix_expression => primary_expression
INFO [Line 72] : unary_expression => postfix_expression
INFO [Line 72] : cast_expression => unary_expression
INFO [Line 72] : multiplicative_expression => cast_expression
INFO [Line 72] : additive_expression => multiplicative_expression
INFO [Line 72] : shift_expression => additive_expression
INFO [Line 72] : relational_expression => shift_expression
INFO [Line 72] : equality_expression => equality_expression == relational_expression
INFO [Line 72] : AND_expression => equality_expression
INFO [Line 72] : exclusive_OR_expression => AND_expression
INFO [Line 72] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 72] : logical_AND_expression => inclusive_OR_expression
INFO [Line 72] : logical_OR_expression => logical_AND_expression
INFO [Line 72] : conditional_expression => logical_OR_expression
INFO [Line 72] : assignment_expression => conditional_expression
INFO [Line 72] : expression => assignment_expression

-------------------- Parsing Line No. 73  --------------------

INFO [Line 73] : jump_statement => continue ;
INFO [Line 73] : statement => jump_statement

-------------------- Parsing Line No. 74  --------------------

INFO [Line 74] : selection_statement => if ( expression ) statement
INFO [Line 74] : statement => selection_statement
INFO [Line 74] : block_item => statement
INFO [Line 74] : block_item_list => block_item
INFO [Line 74] : block_item_list_opt => block_item_list
INFO [Line 74] : compound_statement => { block_item_list_opt }
INFO [Line 74] : statement => compound_statement
INFO [Line 74] : iteration_statement => for ( declaration expression_opt ; expression_opt ) statement
INFO [Line 74] : statement => iteration_statement
INFO [Line 74] : iteration_statement => for ( declaration expression_opt ; expression_opt ) statement
INFO [Line 74] : statement => iteration_statement
INFO [Line 74] : iteration_statement => for ( expression_opt ; expression_opt ; expression_opt ) statement
INFO [Line 74] : statement => iteration_statement
INFO [Line 74] : block_item => statement
INFO [Line 74] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 75  --------------------


-------------------- Parsing Line No. 76  --------------------


-------------------- Parsing Line No. 77  --------------------

INFO [Line 77] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 77] : postfix_expression => primary_expression
INFO [Line 77] : postfix_expression => postfix_expression ++
INFO [Line 77] : unary_expression => postfix_expression
INFO [Line 77] : cast_expression => unary_expression
INFO [Line 77] : multiplicative_expression => cast_expression
INFO [Line 77] : additive_expression => multiplicative_expression
INFO [Line 77] : shift_expression => additive_expression
INFO [Line 77] : relational_expression => shift_expression
INFO [Line 77] : equality_expression => relational_expression
INFO [Line 77] : AND_expression => equality_expression
INFO [Line 77] : exclusive_OR_expression => AND_expression
INFO [Line 77] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 77] : logical_AND_expression => inclusive_OR_expression
INFO [Line 77] : logical_OR_expression => logical_AND_expression
INFO [Line 77] : conditional_expression => logical_OR_expression
INFO [Line 77] : assignment_expression => conditional_expression
INFO [Line 77] : expression => assignment_expression
INFO [Line 77] : expression_opt => expression
INFO [Line 77] : expression_statement => expression_opt ;
INFO [Line 77] : statement => expression_statement
INFO [Line 77] : block_item => statement
INFO [Line 77] : block_item_list => block_item

-------------------- Parsing Line No. 78  --------------------

INFO [Line 78] : block_item_list_opt => block_item_list
INFO [Line 78] : compound_statement => { block_item_list_opt }
INFO [Line 78] : statement => compound_statement
INFO [Line 78] : primary_expression => IDENTIFIER
				IDENTIFIER = n2
INFO [Line 78] : postfix_expression => primary_expression
INFO [Line 78] : unary_expression => postfix_expression
INFO [Line 78] : cast_expression => unary_expression
INFO [Line 78] : multiplicative_expression => cast_expression
INFO [Line 78] : additive_expression => multiplicative_expression
INFO [Line 78] : shift_expression => additive_expression
INFO [Line 78] : relational_expression => shift_expression
INFO [Line 78] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
INFO [Line 78] : postfix_expression => primary_expression
INFO [Line 78] : unary_expression => postfix_expression
INFO [Line 78] : cast_expression => unary_expression
INFO [Line 78] : multiplicative_expression => cast_expression
INFO [Line 78] : additive_expression => multiplicative_expression
INFO [Line 78] : shift_expression => additive_expression
INFO [Line 78] : relational_expression => relational_expression < shift_expression
INFO [Line 78] : equality_expression => relational_expression
INFO [Line 78] : AND_expression => equality_expression
INFO [Line 78] : exclusive_OR_expression => AND_expression
INFO [Line 78] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 78] : logical_AND_expression => inclusive_OR_expression
INFO [Line 78] : logical_OR_expression => logical_AND_expression
INFO [Line 78] : conditional_expression => logical_OR_expression
INFO [Line 78] : assignment_expression => conditional_expression
INFO [Line 78] : expression => assignment_expression
INFO [Line 78] : iteration_statement => do statement while ( expression ) ;
INFO [Line 78] : statement => iteration_statement
INFO [Line 78] : block_item => statement
INFO [Line 78] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 79  --------------------


-------------------- Parsing Line No. 80  --------------------

INFO [Line 80] : type_specifier => int
INFO [Line 80] : declaration_specifiers_opt => epsilon 
INFO [Line 80] : declaration_specifiers => type_specifier declaration_specifiers_opt
INFO [Line 80] : pointer_opt => epsilon
INFO [Line 80] : direct_declarator => IDENTIFIER
				IDENTIFIER = t1
INFO [Line 80] : declarator => pointer_opt direct_declarator
INFO [Line 80] : init_declarator => declarator
INFO [Line 80] : init_declarator_list => init_declarator
INFO [Line 80] : pointer_opt => epsilon
INFO [Line 80] : direct_declarator => IDENTIFIER
				IDENTIFIER = t2
INFO [Line 80] : declarator => pointer_opt direct_declarator
INFO [Line 80] : init_declarator => declarator
INFO [Line 80] : init_declarator_list => init_declarator_list , init_declarator
INFO [Line 80] : pointer_opt => epsilon
INFO [Line 80] : direct_declarator => IDENTIFIER
				IDENTIFIER = t3
INFO [Line 80] : declarator => pointer_opt direct_declarator
INFO [Line 80] : init_declarator => declarator
INFO [Line 80] : init_declarator_list => init_declarator_list , init_declarator
INFO [Line 80] : pointer_opt => epsilon
INFO [Line 80] : direct_declarator => IDENTIFIER
				IDENTIFIER = t4
INFO [Line 80] : declarator => pointer_opt direct_declarator
INFO [Line 80] : init_declarator => declarator
INFO [Line 80] : init_declarator_list => init_declarator_list , init_declarator
INFO [Line 80] : pointer_opt => epsilon
INFO [Line 80] : direct_declarator => IDENTIFIER
				IDENTIFIER = t5
INFO [Line 80] : declarator => pointer_opt direct_declarator
INFO [Line 80] : init_declarator => declarator
INFO [Line 80] : init_declarator_list => init_declarator_list , init_declarator
INFO [Line 80] : pointer_opt => epsilon
INFO [Line 80] : direct_declarator => IDENTIFIER
				IDENTIFIER = t6
INFO [Line 80] : declarator => pointer_opt direct_declarator
INFO [Line 80] : init_declarator => declarator
INFO [Line 80] : init_declarator_list => init_declarator_list , init_declarator
INFO [Line 80] : init_declarator_list_opt => init_declarator_list
INFO [Line 80] : declaration => declaration_specifiers init_declarator_list_opt ;
INFO [Line 80] : block_item => declaration
INFO [Line 80] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 81  --------------------


-------------------- Parsing Line No. 82  --------------------

INFO [Line 82] : primary_expression => IDENTIFIER
				IDENTIFIER = t1
INFO [Line 82] : postfix_expression => primary_expression
INFO [Line 82] : unary_expression => postfix_expression
INFO [Line 82] : assignment_operator => =
INFO [Line 82] : primary_expression => IDENTIFIER
				IDENTIFIER = t1
INFO [Line 82] : postfix_expression => primary_expression
INFO [Line 82] : unary_expression => postfix_expression
INFO [Line 82] : cast_expression => unary_expression
INFO [Line 82] : multiplicative_expression => cast_expression
INFO [Line 82] : additive_expression => multiplicative_expression
INFO [Line 82] : primary_expression => IDENTIFIER
				IDENTIFIER = t2
INFO [Line 82] : postfix_expression => primary_expression
INFO [Line 82] : unary_expression => postfix_expression
INFO [Line 82] : cast_expression => unary_expression
INFO [Line 82] : multiplicative_expression => cast_expression
INFO [Line 82] : additive_expression => additive_expression + multiplicative_expression
INFO [Line 82] : primary_expression => IDENTIFIER
				IDENTIFIER = t3
INFO [Line 82] : postfix_expression => primary_expression
INFO [Line 82] : unary_expression => postfix_expression
INFO [Line 82] : cast_expression => unary_expression
INFO [Line 82] : multiplicative_expression => cast_expression
INFO [Line 82] : primary_expression => IDENTIFIER
				IDENTIFIER = t4
INFO [Line 82] : postfix_expression => primary_expression
INFO [Line 82] : unary_expression => postfix_expression
INFO [Line 82] : cast_expression => unary_expression
INFO [Line 82] : multiplicative_expression => multiplicative_expression / cast_expression
INFO [Line 82] : primary_expression => IDENTIFIER
				IDENTIFIER = t5
INFO [Line 82] : postfix_expression => primary_expression
INFO [Line 82] : unary_expression => postfix_expression
INFO [Line 82] : cast_expression => unary_expression
INFO [Line 82] : multiplicative_expression => multiplicative_expression * cast_expression
INFO [Line 82] : primary_expression => IDENTIFIER
				IDENTIFIER = t6
INFO [Line 82] : postfix_expression => primary_expression
INFO [Line 82] : unary_expression => postfix_expression
INFO [Line 82] : cast_expression => unary_expression
INFO [Line 82] : multiplicative_expression => multiplicative_expression % cast_expression
INFO [Line 82] : additive_expression => additive_expression - multiplicative_expression
INFO [Line 82] : shift_expression => additive_expression
INFO [Line 82] : relational_expression => shift_expression
INFO [Line 82] : equality_expression => relational_expression
INFO [Line 82] : AND_expression => equality_expression
INFO [Line 82] : exclusive_OR_expression => AND_expression
INFO [Line 82] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 82] : logical_AND_expression => inclusive_OR_expression
INFO [Line 82] : logical_OR_expression => logical_AND_expression
INFO [Line 82] : conditional_expression => logical_OR_expression
INFO [Line 82] : assignment_expression => conditional_expression
INFO [Line 82] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 82] : expression => assignment_expression
INFO [Line 82] : expression_opt => expression
INFO [Line 82] : expression_statement => expression_opt ;
INFO [Line 82] : statement => expression_statement
INFO [Line 82] : block_item => statement
INFO [Line 82] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 83  --------------------

INFO [Line 83] : primary_expression => IDENTIFIER
				IDENTIFIER = t2
INFO [Line 83] : postfix_expression => primary_expression
INFO [Line 83] : unary_expression => postfix_expression
INFO [Line 83] : assignment_operator => =
INFO [Line 83] : primary_expression => IDENTIFIER
				IDENTIFIER = t2
INFO [Line 83] : postfix_expression => primary_expression
INFO [Line 83] : unary_expression => postfix_expression
INFO [Line 83] : cast_expression => unary_expression
INFO [Line 83] : multiplicative_expression => cast_expression
INFO [Line 83] : additive_expression => multiplicative_expression
INFO [Line 83] : shift_expression => additive_expression
INFO [Line 83] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
INFO [Line 83] : postfix_expression => primary_expression
INFO [Line 83] : unary_expression => postfix_expression
INFO [Line 83] : cast_expression => unary_expression
INFO [Line 83] : multiplicative_expression => cast_expression
INFO [Line 83] : additive_expression => multiplicative_expression
INFO [Line 83] : shift_expression => shift_expression << additive_expression
INFO [Line 83] : relational_expression => shift_expression
INFO [Line 83] : equality_expression => relational_expression
INFO [Line 83] : AND_expression => equality_expression
INFO [Line 83] : exclusive_OR_expression => AND_expression
INFO [Line 83] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 83] : logical_AND_expression => inclusive_OR_expression
INFO [Line 83] : logical_OR_expression => logical_AND_expression
INFO [Line 83] : conditional_expression => logical_OR_expression
INFO [Line 83] : assignment_expression => conditional_expression
INFO [Line 83] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 83] : expression => assignment_expression
INFO [Line 83] : expression_opt => expression
INFO [Line 83] : expression_statement => expression_opt ;
INFO [Line 83] : statement => expression_statement
INFO [Line 83] : block_item => statement
INFO [Line 83] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 84  --------------------

INFO [Line 84] : primary_expression => IDENTIFIER
				IDENTIFIER = t2
INFO [Line 84] : postfix_expression => primary_expression
INFO [Line 84] : unary_expression => postfix_expression
INFO [Line 84] : assignment_operator => =
INFO [Line 84] : primary_expression => IDENTIFIER
				IDENTIFIER = t2
INFO [Line 84] : postfix_expression => primary_expression
INFO [Line 84] : unary_expression => postfix_expression
INFO [Line 84] : cast_expression => unary_expression
INFO [Line 84] : multiplicative_expression => cast_expression
INFO [Line 84] : additive_expression => multiplicative_expression
INFO [Line 84] : shift_expression => additive_expression
INFO [Line 84] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
INFO [Line 84] : postfix_expression => primary_expression
INFO [Line 84] : unary_expression => postfix_expression
INFO [Line 84] : cast_expression => unary_expression
INFO [Line 84] : multiplicative_expression => cast_expression
INFO [Line 84] : additive_expression => multiplicative_expression
INFO [Line 84] : shift_expression => shift_expression >> additive_expression
INFO [Line 84] : relational_expression => shift_expression
INFO [Line 84] : equality_expression => relational_expression
INFO [Line 84] : AND_expression => equality_expression
INFO [Line 84] : exclusive_OR_expression => AND_expression
INFO [Line 84] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 84] : logical_AND_expression => inclusive_OR_expression
INFO [Line 84] : logical_OR_expression => logical_AND_expression
INFO [Line 84] : conditional_expression => logical_OR_expression
INFO [Line 84] : assignment_expression => conditional_expression
INFO [Line 84] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 84] : expression => assignment_expression
INFO [Line 84] : expression_opt => expression
INFO [Line 84] : expression_statement => expression_opt ;
INFO [Line 84] : statement => expression_statement
INFO [Line 84] : block_item => statement
INFO [Line 84] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 85  --------------------

INFO [Line 85] : primary_expression => IDENTIFIER
				IDENTIFIER = t1
INFO [Line 85] : postfix_expression => primary_expression
INFO [Line 85] : unary_expression => postfix_expression
INFO [Line 85] : assignment_operator => =
INFO [Line 85] : primary_expression => IDENTIFIER
				IDENTIFIER = t2
INFO [Line 85] : postfix_expression => primary_expression
INFO [Line 85] : unary_expression => postfix_expression
INFO [Line 85] : cast_expression => unary_expression
INFO [Line 85] : multiplicative_expression => cast_expression
INFO [Line 85] : additive_expression => multiplicative_expression
INFO [Line 85] : shift_expression => additive_expression
INFO [Line 85] : relational_expression => shift_expression
INFO [Line 85] : equality_expression => relational_expression
INFO [Line 85] : AND_expression => equality_expression
INFO [Line 85] : primary_expression => IDENTIFIER
				IDENTIFIER = t3
INFO [Line 85] : postfix_expression => primary_expression
INFO [Line 85] : unary_expression => postfix_expression
INFO [Line 85] : cast_expression => unary_expression
INFO [Line 85] : multiplicative_expression => cast_expression
INFO [Line 85] : additive_expression => multiplicative_expression
INFO [Line 85] : shift_expression => additive_expression
INFO [Line 85] : relational_expression => shift_expression
INFO [Line 85] : equality_expression => relational_expression
INFO [Line 85] : AND_expression => AND_expression & equality_expression
INFO [Line 85] : exclusive_OR_expression => AND_expression
INFO [Line 85] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 85] : primary_expression => IDENTIFIER
				IDENTIFIER = t4
INFO [Line 85] : postfix_expression => primary_expression
INFO [Line 85] : unary_expression => postfix_expression
INFO [Line 85] : cast_expression => unary_expression
INFO [Line 85] : multiplicative_expression => cast_expression
INFO [Line 85] : additive_expression => multiplicative_expression
INFO [Line 85] : shift_expression => additive_expression
INFO [Line 85] : relational_expression => shift_expression
INFO [Line 85] : equality_expression => relational_expression
INFO [Line 85] : AND_expression => equality_expression
INFO [Line 85] : exclusive_OR_expression => AND_expression
INFO [Line 85] : primary_expression => IDENTIFIER
				IDENTIFIER = t5
INFO [Line 85] : postfix_expression => primary_expression
INFO [Line 85] : unary_expression => postfix_expression
INFO [Line 85] : cast_expression => unary_expression
INFO [Line 85] : multiplicative_expression => cast_expression
INFO [Line 85] : additive_expression => multiplicative_expression
INFO [Line 85] : shift_expression => additive_expression
INFO [Line 85] : relational_expression => shift_expression
INFO [Line 85] : equality_expression => relational_expression
INFO [Line 85] : AND_expression => equality_expression
INFO [Line 85] : exclusive_OR_expression => exclusive_OR_expression ^ AND_expression
INFO [Line 85] : inclusive_OR_expression => inclusive_OR_expression | exclusive_OR_expression
INFO [Line 85] : logical_AND_expression => inclusive_OR_expression
INFO [Line 85] : logical_OR_expression => logical_AND_expression
INFO [Line 85] : conditional_expression => logical_OR_expression
INFO [Line 85] : assignment_expression => conditional_expression
INFO [Line 85] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 85] : expression => assignment_expression
INFO [Line 85] : expression_opt => expression
INFO [Line 85] : expression_statement => expression_opt ;
INFO [Line 85] : statement => expression_statement
INFO [Line 85] : block_item => statement
INFO [Line 85] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 86  --------------------


-------------------- Parsing Line No. 87  --------------------

INFO [Line 87] : primary_expression => IDENTIFIER
				IDENTIFIER = foo1
INFO [Line 87] : postfix_expression => primary_expression
INFO [Line 87] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 1
INFO [Line 87] : postfix_expression => primary_expression
INFO [Line 87] : unary_expression => postfix_expression
INFO [Line 87] : cast_expression => unary_expression
INFO [Line 87] : multiplicative_expression => cast_expression
INFO [Line 87] : additive_expression => multiplicative_expression
INFO [Line 87] : shift_expression => additive_expression
INFO [Line 87] : relational_expression => shift_expression
INFO [Line 87] : equality_expression => relational_expression
INFO [Line 87] : AND_expression => equality_expression
INFO [Line 87] : exclusive_OR_expression => AND_expression
INFO [Line 87] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 87] : logical_AND_expression => inclusive_OR_expression
INFO [Line 87] : logical_OR_expression => logical_AND_expression
INFO [Line 87] : conditional_expression => logical_OR_expression
INFO [Line 87] : assignment_expression => conditional_expression
INFO [Line 87] : argument_expression_list => assignment_expression
INFO [Line 87] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 2
INFO [Line 87] : postfix_expression => primary_expression
INFO [Line 87] : unary_expression => postfix_expression
INFO [Line 87] : cast_expression => unary_expression
INFO [Line 87] : multiplicative_expression => cast_expression
INFO [Line 87] : additive_expression => multiplicative_expression
INFO [Line 87] : shift_expression => additive_expression
INFO [Line 87] : relational_expression => shift_expression
INFO [Line 87] : equality_expression => relational_expression
INFO [Line 87] : AND_expression => equality_expression
INFO [Line 87] : exclusive_OR_expression => AND_expression
INFO [Line 87] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 87] : logical_AND_expression => inclusive_OR_expression
INFO [Line 87] : logical_OR_expression => logical_AND_expression
INFO [Line 87] : conditional_expression => logical_OR_expression
INFO [Line 87] : assignment_expression => conditional_expression
INFO [Line 87] : argument_expression_list => argument_expression_list , assignment_expression
INFO [Line 87] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 3
INFO [Line 87] : postfix_expression => primary_expression
INFO [Line 87] : unary_expression => postfix_expression
INFO [Line 87] : cast_expression => unary_expression
INFO [Line 87] : multiplicative_expression => cast_expression
INFO [Line 87] : additive_expression => multiplicative_expression
INFO [Line 87] : shift_expression => additive_expression
INFO [Line 87] : relational_expression => shift_expression
INFO [Line 87] : equality_expression => relational_expression
INFO [Line 87] : AND_expression => equality_expression
INFO [Line 87] : exclusive_OR_expression => AND_expression
INFO [Line 87] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 87] : logical_AND_expression => inclusive_OR_expression
INFO [Line 87] : logical_OR_expression => logical_AND_expression
INFO [Line 87] : conditional_expression => logical_OR_expression
INFO [Line 87] : assignment_expression => conditional_expression
INFO [Line 87] : argument_expression_list => argument_expression_list , assignment_expression
INFO [Line 87] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 4
INFO [Line 87] : postfix_expression => primary_expression
INFO [Line 87] : unary_expression => postfix_expression
INFO [Line 87] : cast_expression => unary_expression
INFO [Line 87] : multiplicative_expression => cast_expression
INFO [Line 87] : additive_expression => multiplicative_expression
INFO [Line 87] : shift_expression => additive_expression
INFO [Line 87] : relational_expression => shift_expression
INFO [Line 87] : equality_expression => relational_expression
INFO [Line 87] : AND_expression => equality_expression
INFO [Line 87] : exclusive_OR_expression => AND_expression
INFO [Line 87] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 87] : logical_AND_expression => inclusive_OR_expression
INFO [Line 87] : logical_OR_expression => logical_AND_expression
INFO [Line 87] : conditional_expression => logical_OR_expression
INFO [Line 87] : assignment_expression => conditional_expression
INFO [Line 87] : argument_expression_list => argument_expression_list , assignment_expression
INFO [Line 87] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 5
INFO [Line 87] : postfix_expression => primary_expression
INFO [Line 87] : unary_expression => postfix_expression
INFO [Line 87] : cast_expression => unary_expression
INFO [Line 87] : multiplicative_expression => cast_expression
INFO [Line 87] : additive_expression => multiplicative_expression
INFO [Line 87] : shift_expression => additive_expression
INFO [Line 87] : relational_expression => shift_expression
INFO [Line 87] : equality_expression => relational_expression
INFO [Line 87] : AND_expression => equality_expression
INFO [Line 87] : exclusive_OR_expression => AND_expression
INFO [Line 87] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 87] : logical_AND_expression => inclusive_OR_expression
INFO [Line 87] : logical_OR_expression => logical_AND_expression
INFO [Line 87] : conditional_expression => logical_OR_expression
INFO [Line 87] : assignment_expression => conditional_expression
INFO [Line 87] : argument_expression_list => argument_expression_list , assignment_expression
INFO [Line 87] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 6
INFO [Line 87] : postfix_expression => primary_expression
INFO [Line 87] : unary_expression => postfix_expression
INFO [Line 87] : cast_expression => unary_expression
INFO [Line 87] : multiplicative_expression => cast_expression
INFO [Line 87] : additive_expression => multiplicative_expression
INFO [Line 87] : shift_expression => additive_expression
INFO [Line 87] : relational_expression => shift_expression
INFO [Line 87] : equality_expression => relational_expression
INFO [Line 87] : AND_expression => equality_expression
INFO [Line 87] : exclusive_OR_expression => AND_expression
INFO [Line 87] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 87] : logical_AND_expression => inclusive_OR_expression
INFO [Line 87] : logical_OR_expression => logical_AND_expression
INFO [Line 87] : conditional_expression => logical_OR_expression
INFO [Line 87] : assignment_expression => conditional_expression
INFO [Line 87] : argument_expression_list => argument_expression_list , assignment_expression
INFO [Line 87] : argument_expression_list_opt => argument_expression_list
INFO [Line 87] : postfix_expression => postfix_expression ( argument_expression_list_opt )
INFO [Line 87] : unary_expression => postfix_expression
INFO [Line 87] : cast_expression => unary_expression
INFO [Line 87] : multiplicative_expression => cast_expression
INFO [Line 87] : additive_expression => multiplicative_expression
INFO [Line 87] : shift_expression => additive_expression
INFO [Line 87] : relational_expression => shift_expression
INFO [Line 87] : equality_expression => relational_expression
INFO [Line 87] : AND_expression => equality_expression
INFO [Line 87] : exclusive_OR_expression => AND_expression
INFO [Line 87] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 87] : logical_AND_expression => inclusive_OR_expression
INFO [Line 87] : logical_OR_expression => logical_AND_expression
INFO [Line 87] : conditional_expression => logical_OR_expression
INFO [Line 87] : assignment_expression => conditional_expression
INFO [Line 87] : expression => assignment_expression
INFO [Line 87] : expression_opt => expression
INFO [Line 87] : expression_statement => expression_opt ;
INFO [Line 87] : statement => expression_statement
INFO [Line 87] : block_item => statement
INFO [Line 87] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 88  --------------------


-------------------- Parsing Line No. 89  --------------------


-------------------- Parsing Line No. 90  --------------------

INFO [Line 90] : primary_expression => IDENTIFIER
				IDENTIFIER = ms1
INFO [Line 90] : postfix_expression => primary_expression
INFO [Line 90] : postfix_expression => postfix_expression . IDENTIFIER
				IDENTIFIER = a
INFO [Line 90] : unary_expression => postfix_expression
INFO [Line 90] : assignment_operator => =
INFO [Line 90] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 3
INFO [Line 90] : postfix_expression => primary_expression
INFO [Line 90] : unary_expression => postfix_expression
INFO [Line 90] : cast_expression => unary_expression
INFO [Line 90] : multiplicative_expression => cast_expression
INFO [Line 90] : additive_expression => multiplicative_expression
INFO [Line 90] : shift_expression => additive_expression
INFO [Line 90] : relational_expression => shift_expression
INFO [Line 90] : equality_expression => relational_expression
INFO [Line 90] : AND_expression => equality_expression
INFO [Line 90] : exclusive_OR_expression => AND_expression
INFO [Line 90] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 90] : logical_AND_expression => inclusive_OR_expression
INFO [Line 90] : logical_OR_expression => logical_AND_expression
INFO [Line 90] : conditional_expression => logical_OR_expression
INFO [Line 90] : assignment_expression => conditional_expression
INFO [Line 90] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 90] : expression => assignment_expression
INFO [Line 90] : expression_opt => expression
INFO [Line 90] : expression_statement => expression_opt ;
INFO [Line 90] : statement => expression_statement
INFO [Line 90] : block_item => statement
INFO [Line 90] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 91  --------------------

INFO [Line 91] : primary_expression => IDENTIFIER
				IDENTIFIER = ms2
INFO [Line 91] : postfix_expression => primary_expression
INFO [Line 91] : postfix_expression => postfix_expression -> IDENTIFIER
				IDENTIFIER = a
INFO [Line 91] : unary_expression => postfix_expression
INFO [Line 91] : assignment_operator => =
INFO [Line 91] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 4
INFO [Line 91] : postfix_expression => primary_expression
INFO [Line 91] : unary_expression => postfix_expression
INFO [Line 91] : cast_expression => unary_expression
INFO [Line 91] : multiplicative_expression => cast_expression
INFO [Line 91] : additive_expression => multiplicative_expression
INFO [Line 91] : shift_expression => additive_expression
INFO [Line 91] : relational_expression => shift_expression
INFO [Line 91] : equality_expression => relational_expression
INFO [Line 91] : AND_expression => equality_expression
INFO [Line 91] : exclusive_OR_expression => AND_expression
INFO [Line 91] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 91] : logical_AND_expression => inclusive_OR_expression
INFO [Line 91] : logical_OR_expression => logical_AND_expression
INFO [Line 91] : conditional_expression => logical_OR_expression
INFO [Line 91] : assignment_expression => conditional_expression
INFO [Line 91] : assignment_expression => unary_expression assignment_operator assignment_expression
INFO [Line 91] : expression => assignment_expression
INFO [Line 91] : expression_opt => expression
INFO [Line 91] : expression_statement => expression_opt ;
INFO [Line 91] : statement => expression_statement
INFO [Line 91] : block_item => statement
INFO [Line 91] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 92  --------------------


-------------------- Parsing Line No. 93  --------------------

INFO [Line 93] : primary_expression => INTEGER_CONSTANT
				INTEGER_CONSTANT = 0
INFO [Line 93] : postfix_expression => primary_expression
INFO [Line 93] : unary_expression => postfix_expression
INFO [Line 93] : cast_expression => unary_expression
INFO [Line 93] : multiplicative_expression => cast_expression
INFO [Line 93] : additive_expression => multiplicative_expression
INFO [Line 93] : shift_expression => additive_expression
INFO [Line 93] : relational_expression => shift_expression
INFO [Line 93] : equality_expression => relational_expression
INFO [Line 93] : AND_expression => equality_expression
INFO [Line 93] : exclusive_OR_expression => AND_expression
INFO [Line 93] : inclusive_OR_expression => exclusive_OR_expression
INFO [Line 93] : logical_AND_expression => inclusive_OR_expression
INFO [Line 93] : logical_OR_expression => logical_AND_expression
INFO [Line 93] : conditional_expression => logical_OR_expression
INFO [Line 93] : assignment_expression => conditional_expression
INFO [Line 93] : expression => assignment_expression
INFO [Line 93] : expression_opt => expression
INFO [Line 93] : jump_statement => return expression_opt ;
INFO [Line 93] : statement => jump_statement
INFO [Line 93] : block_item => statement
INFO [Line 93] : block_item_list => block_item_list block_item

-------------------- Parsing Line No. 94  --------------------

INFO [Line 94] : block_item_list_opt => block_item_list
INFO [Line 94] : compound_statement => { block_item_list_opt }
INFO [Line 94] : function_definition => declaration_specifiers declarator declaration_list_opt compound_statement
INFO [Line 94] : external_declaration => function_definition
INFO [Line 94] : translation_unit => translation_unit external_declaration

-------------------- Parsing Line No. 95  --------------------

