Terminals unused in grammar

   STRUCT
   TYPEDEF
   UNION
   HASH
   INVALID_TOKEN


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | INTEGER_CONSTANT
    3                   | FLOATING_CONSTANT
    4                   | CHARACTER_CONSTANT
    5                   | STRING_LITERAL
    6                   | LEFT_PARENTHESES expression RIGHT_PARENTHESES

    7 postfix_expression: primary_expression
    8                   | postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | postfix_expression DOT IDENTIFIER
   11                   | postfix_expression ARROW IDENTIFIER
   12                   | postfix_expression INCREMENT
   13                   | postfix_expression DECREMENT
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

   16 argument_expression_list_opt: argument_expression_list
   17                             | %empty

   18 argument_expression_list: assignment_expression
   19                         | argument_expression_list COMMA assignment_expression

   20 unary_expression: postfix_expression
   21                 | INCREMENT unary_expression
   22                 | DECREMENT unary_expression
   23                 | unary_operator cast_expression
   24                 | SIZEOF unary_expression
   25                 | SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES

   26 unary_operator: BITWISE_AND
   27               | ASTERISK
   28               | PLUS
   29               | MINUS
   30               | TILDE
   31               | EXCLAMATION

   32 cast_expression: unary_expression
   33                | LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression

   34 multiplicative_expression: cast_expression
   35                          | multiplicative_expression ASTERISK cast_expression
   36                          | multiplicative_expression SLASH cast_expression
   37                          | multiplicative_expression MODULO cast_expression

   38 additive_expression: multiplicative_expression
   39                    | additive_expression PLUS multiplicative_expression
   40                    | additive_expression MINUS multiplicative_expression

   41 shift_expression: additive_expression
   42                 | shift_expression LEFT_SHIFT additive_expression
   43                 | shift_expression RIGHT_SHIFT additive_expression

   44 relational_expression: shift_expression
   45                      | relational_expression LESS_THAN shift_expression
   46                      | relational_expression GREATER_THAN shift_expression
   47                      | relational_expression LESS_EQUAL_THAN shift_expression
   48                      | relational_expression GREATER_EQUAL_THAN shift_expression

   49 equality_expression: relational_expression
   50                    | equality_expression EQUALS relational_expression
   51                    | equality_expression NOT_EQUALS relational_expression

   52 AND_expression: equality_expression
   53               | AND_expression BITWISE_AND equality_expression

   54 exclusive_OR_expression: AND_expression
   55                        | exclusive_OR_expression BITWISE_XOR AND_expression

   56 inclusive_OR_expression: exclusive_OR_expression
   57                        | inclusive_OR_expression BITWISE_OR exclusive_OR_expression

   58 M: %empty

   59 N: %empty

   60 logical_AND_expression: inclusive_OR_expression
   61                       | logical_AND_expression LOGICAL_AND M inclusive_OR_expression

   62 logical_OR_expression: logical_AND_expression
   63                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   64 conditional_expression: logical_OR_expression
   65                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   66 assignment_expression: conditional_expression
   67                      | unary_expression assignment_operator assignment_expression

   68 assignment_operator: ASSIGNMENT
   69                    | ASTERISK_ASSIGNMENT
   70                    | SLASH_ASSIGNMENT
   71                    | MODULO_ASSIGNMENT
   72                    | PLUS_ASSIGNMENT
   73                    | MINUS_ASSIGNMENT
   74                    | LEFT_SHIFT_ASSIGNMENT
   75                    | RIGHT_SHIFT_ASSIGNMENT
   76                    | BITWISE_AND_ASSIGNMENT
   77                    | BITWISE_XOR_ASSIGNMENT
   78                    | BITWISE_OR_ASSIGNMENT

   79 expression: assignment_expression
   80           | expression COMMA assignment_expression

   81 constant_expression: conditional_expression

   82 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON

   83 init_declarator_list_opt: init_declarator_list
   84                         | %empty

   85 declaration_specifiers: storage_class_specifier declaration_specifiers_opt
   86                       | type_specifier declaration_specifiers_opt
   87                       | type_qualifier declaration_specifiers_opt
   88                       | function_specifier declaration_specifiers_opt

   89 declaration_specifiers_opt: declaration_specifiers
   90                           | %empty

   91 init_declarator_list: init_declarator
   92                     | init_declarator_list COMMA init_declarator

   93 init_declarator: declarator
   94                | declarator ASSIGNMENT initialiser

   95 storage_class_specifier: EXTERN
   96                        | STATIC
   97                        | AUTO
   98                        | REGISTER

   99 type_specifier: VOIDTYPE
  100               | CHARTYPE
  101               | SHORT
  102               | INTTYPE
  103               | LONG
  104               | FLOATTYPE
  105               | DOUBLE
  106               | SIGNED
  107               | UNSIGNED
  108               | _BOOL
  109               | _COMPLEX
  110               | _IMAGINARY
  111               | enum_specifier

  112 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  113                         | type_qualifier specifier_qualifier_list_opt

  114 specifier_qualifier_list_opt: specifier_qualifier_list
  115                             | %empty

  116 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | ENUM IDENTIFIER

  119 identifier_opt: IDENTIFIER
  120               | %empty

  121 enumerator_list: enumerator
  122                | enumerator_list COMMA enumerator

  123 enumerator: IDENTIFIER
  124           | IDENTIFIER ASSIGNMENT constant_expression

  125 type_qualifier: CONST
  126               | RESTRICT
  127               | VOLATILE

  128 function_specifier: INLINE

  129 declarator: pointer direct_declarator
  130           | direct_declarator

  131 change_scope: %empty

  132 direct_declarator: IDENTIFIER
  133                  | LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  134                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

  146 type_qualifier_list_opt: type_qualifier_list
  147                        | %empty

  148 pointer: ASTERISK type_qualifier_list_opt
  149        | ASTERISK type_qualifier_list_opt pointer

  150 type_qualifier_list: type_qualifier
  151                    | type_qualifier_list type_qualifier

  152 parameter_type_list: parameter_list
  153                    | parameter_list COMMA ELLIPSIS

  154 parameter_list: parameter_declaration
  155               | parameter_list COMMA parameter_declaration

  156 parameter_declaration: declaration_specifiers declarator
  157                      | declaration_specifiers

  158 identifier_list: IDENTIFIER
  159                | identifier_list COMMA IDENTIFIER

  160 type_name: specifier_qualifier_list

  161 initialiser: assignment_expression
  162            | LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  163            | LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

  164 initialiser_list: designation_opt initialiser
  165                 | initialiser_list COMMA designation_opt initialiser

  166 designation_opt: designation
  167                | %empty

  168 designation: designator_list ASSIGNMENT

  169 designator_list: designator
  170                | designator_list designator

  171 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  172           | DOT IDENTIFIER

  173 statement: labeled_statement
  174          | compound_statement
  175          | expression_statement
  176          | selection_statement
  177          | iteration_statement
  178          | jump_statement

  179 labeled_statement: IDENTIFIER COLON statement
  180                  | CASE constant_expression COLON statement
  181                  | DEFAULT COLON statement

  182 change_block: %empty

  183 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET

  184 block_item_list_opt: block_item_list
  185                    | %empty

  186 block_item_list: block_item
  187                | block_item_list M block_item

  188 block_item: declaration
  189           | statement

  190 expression_statement: expression_opt SEMI_COLON

  191 expression_opt: expression
  192               | %empty

  193 selection_statement: IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement

  196 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

  200 jump_statement: GOTO IDENTIFIER SEMI_COLON
  201               | CONTINUE SEMI_COLON
  202               | BREAK SEMI_COLON
  203               | RETURN expression_opt SEMI_COLON

  204 translation_unit: external_declaration
  205                 | translation_unit external_declaration

  206 external_declaration: function_definition
  207                     | declaration

  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

  209 declaration_list_opt: declaration_list
  210                     | %empty

  211 declaration_list: declaration
  212                 | declaration_list declaration


Terminals, with rules where they appear

$end (0) 0
error (256)
AUTO (258) 97
BREAK (259) 202
CASE (260) 180
CHARTYPE (261) 100
CONST (262) 125
CONTINUE (263) 201
DEFAULT (264) 181
DO (265) 197
DOUBLE (266) 105
ELSE (267) 194
ENUM (268) 116 117 118
EXTERN (269) 95
FLOATTYPE (270) 104
FOR (271) 198 199
GOTO (272) 200
IF (273) 193 194
INLINE (274) 128
INTTYPE (275) 102
LONG (276) 103
REGISTER (277) 98
RESTRICT (278) 126
RETURN (279) 203
SHORT (280) 101
SIGNED (281) 106
SIZEOF (282) 24 25
STATIC (283) 96 138 139 140
STRUCT (284)
SWITCH (285) 195
TYPEDEF (286)
UNION (287)
UNSIGNED (288) 107
VOIDTYPE (289) 99
VOLATILE (290) 127
WHILE (291) 196 197
_BOOL (292) 108
_COMPLEX (293) 109
_IMAGINARY (294) 110
IDENTIFIER (295) 1 10 11 118 119 123 124 132 158 159 172 179 200
INTEGER_CONSTANT (296) 2
FLOATING_CONSTANT (297) 3
CHARACTER_CONSTANT (298) 4
STRING_LITERAL (299) 5
LEFT_SQUARE_BRACKET (300) 8 134 135 136 137 138 139 140 141 142 171
INCREMENT (301) 12 21
SLASH (302) 36
QUESTION_MARK (303) 65
ASSIGNMENT (304) 68 94 124 168
COMMA (305) 15 19 80 92 117 122 153 155 159 163 165
RIGHT_SQUARE_BRACKET (306) 8 134 135 136 137 138 139 140 141 142 171
LEFT_PARENTHESES (307) 6 9 14 15 25 33 133 143 144 145 193 194 195
    196 197 198 199
LEFT_CURLY_BRACKET (308) 14 15 116 117 162 163 183 208
RIGHT_CURLY_BRACKET (309) 14 15 116 117 162 163 183 208
DOT (310) 10 172
ARROW (311) 11
ASTERISK (312) 27 35 141 142 148 149
PLUS (313) 28 39
MINUS (314) 29 40
TILDE (315) 30
EXCLAMATION (316) 31
MODULO (317) 37
LEFT_SHIFT (318) 42
RIGHT_SHIFT (319) 43
LESS_THAN (320) 45
GREATER_THAN (321) 46
LESS_EQUAL_THAN (322) 47
GREATER_EQUAL_THAN (323) 48
COLON (324) 65 179 180 181
SEMI_COLON (325) 82 190 197 198 199 200 201 202 203
ELLIPSIS (326) 153
ASTERISK_ASSIGNMENT (327) 69
SLASH_ASSIGNMENT (328) 70
MODULO_ASSIGNMENT (329) 71
PLUS_ASSIGNMENT (330) 72
MINUS_ASSIGNMENT (331) 73
LEFT_SHIFT_ASSIGNMENT (332) 74
HASH (333)
DECREMENT (334) 13 22
RIGHT_PARENTHESES (335) 6 9 14 15 25 33 133 143 144 145 193 194 195
    196 197 198 199
BITWISE_AND (336) 26 53
EQUALS (337) 50
BITWISE_XOR (338) 55
BITWISE_OR (339) 57
LOGICAL_AND (340) 61
LOGICAL_OR (341) 63
RIGHT_SHIFT_ASSIGNMENT (342) 75
NOT_EQUALS (343) 51
BITWISE_AND_ASSIGNMENT (344) 76
BITWISE_OR_ASSIGNMENT (345) 78
BITWISE_XOR_ASSIGNMENT (346) 77
INVALID_TOKEN (347)
THEN (348)


Nonterminals, with rules where they appear

$accept (94)
    on left: 0
primary_expression (95)
    on left: 1 2 3 4 5 6, on right: 7
postfix_expression (96)
    on left: 7 8 9 10 11 12 13 14 15, on right: 8 9 10 11 12 13 20
argument_expression_list_opt (97)
    on left: 16 17, on right: 9
argument_expression_list (98)
    on left: 18 19, on right: 16 19
unary_expression (99)
    on left: 20 21 22 23 24 25, on right: 21 22 24 32 67
unary_operator (100)
    on left: 26 27 28 29 30 31, on right: 23
cast_expression (101)
    on left: 32 33, on right: 23 33 34 35 36 37
multiplicative_expression (102)
    on left: 34 35 36 37, on right: 35 36 37 38 39 40
additive_expression (103)
    on left: 38 39 40, on right: 39 40 41 42 43
shift_expression (104)
    on left: 41 42 43, on right: 42 43 44 45 46 47 48
relational_expression (105)
    on left: 44 45 46 47 48, on right: 45 46 47 48 49 50 51
equality_expression (106)
    on left: 49 50 51, on right: 50 51 52 53
AND_expression (107)
    on left: 52 53, on right: 53 54 55
exclusive_OR_expression (108)
    on left: 54 55, on right: 55 56 57
inclusive_OR_expression (109)
    on left: 56 57, on right: 57 60 61
M (110)
    on left: 58, on right: 61 63 65 187 193 194 196 197 198
N (111)
    on left: 59, on right: 65 193 194 198
logical_AND_expression (112)
    on left: 60 61, on right: 61 62 63
logical_OR_expression (113)
    on left: 62 63, on right: 63 64 65
conditional_expression (114)
    on left: 64 65, on right: 65 66 81
assignment_expression (115)
    on left: 66 67, on right: 18 19 67 79 80 134 136 138 139 140 161
assignment_operator (116)
    on left: 68 69 70 71 72 73 74 75 76 77 78, on right: 67
expression (117)
    on left: 79 80, on right: 6 8 65 80 191 193 194 195 196 197
constant_expression (118)
    on left: 81, on right: 124 171 180
declaration (119)
    on left: 82, on right: 188 199 207 211 212
init_declarator_list_opt (120)
    on left: 83 84, on right: 82
declaration_specifiers (121)
    on left: 85 86 87 88, on right: 82 89 156 157 208
declaration_specifiers_opt (122)
    on left: 89 90, on right: 85 86 87 88
init_declarator_list (123)
    on left: 91 92, on right: 83 92
init_declarator (124)
    on left: 93 94, on right: 91 92
storage_class_specifier (125)
    on left: 95 96 97 98, on right: 85
type_specifier (126)
    on left: 99 100 101 102 103 104 105 106 107 108 109 110 111, on right:
    86 112
specifier_qualifier_list (127)
    on left: 112 113, on right: 114 160
specifier_qualifier_list_opt (128)
    on left: 114 115, on right: 112 113
enum_specifier (129)
    on left: 116 117 118, on right: 111
identifier_opt (130)
    on left: 119 120, on right: 116 117
enumerator_list (131)
    on left: 121 122, on right: 116 117 122
enumerator (132)
    on left: 123 124, on right: 121 122
type_qualifier (133)
    on left: 125 126 127, on right: 87 113 150 151
function_specifier (134)
    on left: 128, on right: 88
declarator (135)
    on left: 129 130, on right: 93 94 133 156 208
change_scope (136)
    on left: 131, on right: 143 145 183 208
direct_declarator (137)
    on left: 132 133 134 135 136 137 138 139 140 141 142 143 144 145,
    on right: 129 130 134 135 136 137 138 139 140 141 142 143 144 145
type_qualifier_list_opt (138)
    on left: 146 147, on right: 148 149
pointer (139)
    on left: 148 149, on right: 129 149
type_qualifier_list (140)
    on left: 150 151, on right: 134 135 138 140 141 146 151
parameter_type_list (141)
    on left: 152 153, on right: 143
parameter_list (142)
    on left: 154 155, on right: 152 153 155
parameter_declaration (143)
    on left: 156 157, on right: 154 155
identifier_list (144)
    on left: 158 159, on right: 144 159
type_name (145)
    on left: 160, on right: 14 15 25 33
initialiser (146)
    on left: 161 162 163, on right: 94 164 165
initialiser_list (147)
    on left: 164 165, on right: 14 15 162 163 165
designation_opt (148)
    on left: 166 167, on right: 164 165
designation (149)
    on left: 168, on right: 166
designator_list (150)
    on left: 169 170, on right: 168 170
designator (151)
    on left: 171 172, on right: 169 170
statement (152)
    on left: 173 174 175 176 177 178, on right: 179 180 181 189 193
    194 195 196 197 198 199
labeled_statement (153)
    on left: 179 180 181, on right: 173
change_block (154)
    on left: 182, on right: 183
compound_statement (155)
    on left: 183, on right: 174
block_item_list_opt (156)
    on left: 184 185, on right: 183 208
block_item_list (157)
    on left: 186 187, on right: 184 187
block_item (158)
    on left: 188 189, on right: 186 187
expression_statement (159)
    on left: 190, on right: 175
expression_opt (160)
    on left: 191 192, on right: 190 198 199 203
selection_statement (161)
    on left: 193 194 195, on right: 176
iteration_statement (162)
    on left: 196 197 198 199, on right: 177
jump_statement (163)
    on left: 200 201 202 203, on right: 178
translation_unit (164)
    on left: 204 205, on right: 0 205
external_declaration (165)
    on left: 206 207, on right: 204 205
function_definition (166)
    on left: 208, on right: 206
declaration_list_opt (167)
    on left: 209 210, on right: 208
declaration_list (168)
    on left: 211 212, on right: 209 212


State 0

    0 $accept: . translation_unit $end
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  204 translation_unit: . external_declaration
  205                 | . translation_unit external_declaration
  206 external_declaration: . function_definition
  207                     | . declaration
  208 function_definition: . declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    translation_unit         go to state 29
    external_declaration     go to state 30
    function_definition      go to state 31


State 1

   97 storage_class_specifier: AUTO .

    $default  reduce using rule 97 (storage_class_specifier)


State 2

  100 type_specifier: CHARTYPE .

    $default  reduce using rule 100 (type_specifier)


State 3

  125 type_qualifier: CONST .

    $default  reduce using rule 125 (type_qualifier)


State 4

  105 type_specifier: DOUBLE .

    $default  reduce using rule 105 (type_specifier)


State 5

  116 enum_specifier: ENUM . identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | ENUM . identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | ENUM . IDENTIFIER
  119 identifier_opt: . IDENTIFIER
  120               | . %empty  [LEFT_CURLY_BRACKET]

    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 120 (identifier_opt)

    identifier_opt  go to state 33


State 6

   95 storage_class_specifier: EXTERN .

    $default  reduce using rule 95 (storage_class_specifier)


State 7

  104 type_specifier: FLOATTYPE .

    $default  reduce using rule 104 (type_specifier)


State 8

  128 function_specifier: INLINE .

    $default  reduce using rule 128 (function_specifier)


State 9

  102 type_specifier: INTTYPE .

    $default  reduce using rule 102 (type_specifier)


State 10

  103 type_specifier: LONG .

    $default  reduce using rule 103 (type_specifier)


State 11

   98 storage_class_specifier: REGISTER .

    $default  reduce using rule 98 (storage_class_specifier)


State 12

  126 type_qualifier: RESTRICT .

    $default  reduce using rule 126 (type_qualifier)


State 13

  101 type_specifier: SHORT .

    $default  reduce using rule 101 (type_specifier)


State 14

  106 type_specifier: SIGNED .

    $default  reduce using rule 106 (type_specifier)


State 15

   96 storage_class_specifier: STATIC .

    $default  reduce using rule 96 (storage_class_specifier)


State 16

  107 type_specifier: UNSIGNED .

    $default  reduce using rule 107 (type_specifier)


State 17

   99 type_specifier: VOIDTYPE .

    $default  reduce using rule 99 (type_specifier)


State 18

  127 type_qualifier: VOLATILE .

    $default  reduce using rule 127 (type_qualifier)


State 19

  108 type_specifier: _BOOL .

    $default  reduce using rule 108 (type_specifier)


State 20

  109 type_specifier: _COMPLEX .

    $default  reduce using rule 109 (type_specifier)


State 21

  110 type_specifier: _IMAGINARY .

    $default  reduce using rule 110 (type_specifier)


State 22

  207 external_declaration: declaration .

    $default  reduce using rule 207 (external_declaration)


State 23

   82 declaration: declaration_specifiers . init_declarator_list_opt SEMI_COLON
   83 init_declarator_list_opt: . init_declarator_list
   84                         | . %empty  [SEMI_COLON]
   91 init_declarator_list: . init_declarator
   92                     | . init_declarator_list COMMA init_declarator
   93 init_declarator: . declarator
   94                | . declarator ASSIGNMENT initialiser
  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  134                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | . direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | . direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | . direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | . direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | . direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  148 pointer: . ASTERISK type_qualifier_list_opt
  149        | . ASTERISK type_qualifier_list_opt pointer
  208 function_definition: declaration_specifiers . declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    IDENTIFIER        shift, and go to state 34
    LEFT_PARENTHESES  shift, and go to state 35
    ASTERISK          shift, and go to state 36

    $default  reduce using rule 84 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 37
    init_declarator_list      go to state 38
    init_declarator           go to state 39
    declarator                go to state 40
    direct_declarator         go to state 41
    pointer                   go to state 42


State 24

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   85                       | storage_class_specifier . declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: . declaration_specifiers
   90                           | . %empty  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 44
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 25

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   86                       | type_specifier . declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: . declaration_specifiers
   90                           | . %empty  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 45
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 26

  111 type_specifier: enum_specifier .

    $default  reduce using rule 111 (type_specifier)


State 27

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   87                       | type_qualifier . declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   89 declaration_specifiers_opt: . declaration_specifiers
   90                           | . %empty  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 46
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 28

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   88                       | function_specifier . declaration_specifiers_opt
   89 declaration_specifiers_opt: . declaration_specifiers
   90                           | . %empty  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers_opt)

    declaration_specifiers      go to state 43
    declaration_specifiers_opt  go to state 47
    storage_class_specifier     go to state 24
    type_specifier              go to state 25
    enum_specifier              go to state 26
    type_qualifier              go to state 27
    function_specifier          go to state 28


State 29

    0 $accept: translation_unit . $end
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  205 translation_unit: translation_unit . external_declaration
  206 external_declaration: . function_definition
  207                     | . declaration
  208 function_definition: . declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $end        shift, and go to state 48
    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    external_declaration     go to state 49
    function_definition      go to state 31


State 30

  204 translation_unit: external_declaration .

    $default  reduce using rule 204 (translation_unit)


State 31

  206 external_declaration: function_definition .

    $default  reduce using rule 206 (external_declaration)


State 32

  118 enum_specifier: ENUM IDENTIFIER .  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, FLOATTYPE, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, _BOOL, _COMPLEX, _IMAGINARY, IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
  119 identifier_opt: IDENTIFIER .  [LEFT_CURLY_BRACKET]

    LEFT_CURLY_BRACKET  reduce using rule 119 (identifier_opt)
    $default            reduce using rule 118 (enum_specifier)


State 33

  116 enum_specifier: ENUM identifier_opt . LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | ENUM identifier_opt . LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 50


State 34

  132 direct_declarator: IDENTIFIER .

    $default  reduce using rule 132 (direct_declarator)


State 35

  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  133                  | LEFT_PARENTHESES . declarator RIGHT_PARENTHESES
  134                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | . direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | . direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | . direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | . direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | . direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  148 pointer: . ASTERISK type_qualifier_list_opt
  149        | . ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 34
    LEFT_PARENTHESES  shift, and go to state 35
    ASTERISK          shift, and go to state 36

    declarator         go to state 51
    direct_declarator  go to state 41
    pointer            go to state 42


State 36

  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  146 type_qualifier_list_opt: . type_qualifier_list
  147                        | . %empty  [IDENTIFIER, LEFT_PARENTHESES, ASTERISK]
  148 pointer: ASTERISK . type_qualifier_list_opt
  149        | ASTERISK . type_qualifier_list_opt pointer
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 147 (type_qualifier_list_opt)

    type_qualifier           go to state 52
    type_qualifier_list_opt  go to state 53
    type_qualifier_list      go to state 54


State 37

   82 declaration: declaration_specifiers init_declarator_list_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 55


State 38

   83 init_declarator_list_opt: init_declarator_list .  [SEMI_COLON]
   92 init_declarator_list: init_declarator_list . COMMA init_declarator

    COMMA  shift, and go to state 56

    $default  reduce using rule 83 (init_declarator_list_opt)


State 39

   91 init_declarator_list: init_declarator .

    $default  reduce using rule 91 (init_declarator_list)


State 40

   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   93 init_declarator: declarator .  [COMMA, SEMI_COLON]
   94                | declarator . ASSIGNMENT initialiser
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  208 function_definition: declaration_specifiers declarator . declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  209 declaration_list_opt: . declaration_list
  210                     | . %empty  [LEFT_CURLY_BRACKET]
  211 declaration_list: . declaration
  212                 | . declaration_list declaration

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21
    ASSIGNMENT  shift, and go to state 57

    LEFT_CURLY_BRACKET  reduce using rule 210 (declaration_list_opt)
    $default            reduce using rule 93 (init_declarator)

    declaration              go to state 58
    declaration_specifiers   go to state 59
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    declaration_list_opt     go to state 60
    declaration_list         go to state 61


State 41

  130 declarator: direct_declarator .  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, FLOATTYPE, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, _BOOL, _COMPLEX, _IMAGINARY, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
  134 direct_declarator: direct_declarator . LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator . LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | direct_declarator . LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | direct_declarator . LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator . LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | direct_declarator . LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | direct_declarator . LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | direct_declarator . LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | direct_declarator . LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | direct_declarator . LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | direct_declarator . LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 62
    LEFT_PARENTHESES     shift, and go to state 63

    $default  reduce using rule 130 (declarator)


State 42

  129 declarator: pointer . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  134                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | . direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | . direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | . direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | . direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | . direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    IDENTIFIER        shift, and go to state 34
    LEFT_PARENTHESES  shift, and go to state 35

    direct_declarator  go to state 64


State 43

   89 declaration_specifiers_opt: declaration_specifiers .

    $default  reduce using rule 89 (declaration_specifiers_opt)


State 44

   85 declaration_specifiers: storage_class_specifier declaration_specifiers_opt .

    $default  reduce using rule 85 (declaration_specifiers)


State 45

   86 declaration_specifiers: type_specifier declaration_specifiers_opt .

    $default  reduce using rule 86 (declaration_specifiers)


State 46

   87 declaration_specifiers: type_qualifier declaration_specifiers_opt .

    $default  reduce using rule 87 (declaration_specifiers)


State 47

   88 declaration_specifiers: function_specifier declaration_specifiers_opt .

    $default  reduce using rule 88 (declaration_specifiers)


State 48

    0 $accept: translation_unit $end .

    $default  accept


State 49

  205 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 205 (translation_unit)


State 50

  116 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET . enumerator_list RIGHT_CURLY_BRACKET
  117               | ENUM identifier_opt LEFT_CURLY_BRACKET . enumerator_list COMMA RIGHT_CURLY_BRACKET
  121 enumerator_list: . enumerator
  122                | . enumerator_list COMMA enumerator
  123 enumerator: . IDENTIFIER
  124           | . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER  shift, and go to state 65

    enumerator_list  go to state 66
    enumerator       go to state 67


State 51

  133 direct_declarator: LEFT_PARENTHESES declarator . RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 68


State 52

  150 type_qualifier_list: type_qualifier .

    $default  reduce using rule 150 (type_qualifier_list)


State 53

  148 pointer: . ASTERISK type_qualifier_list_opt
  148        | ASTERISK type_qualifier_list_opt .  [IDENTIFIER, LEFT_PARENTHESES]
  149        | . ASTERISK type_qualifier_list_opt pointer
  149        | ASTERISK type_qualifier_list_opt . pointer

    ASTERISK  shift, and go to state 36

    $default  reduce using rule 148 (pointer)

    pointer  go to state 69


State 54

  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  146 type_qualifier_list_opt: type_qualifier_list .  [IDENTIFIER, LEFT_PARENTHESES, ASTERISK]
  151 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 12
    VOLATILE  shift, and go to state 18

    $default  reduce using rule 146 (type_qualifier_list_opt)

    type_qualifier  go to state 70


State 55

   82 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON .

    $default  reduce using rule 82 (declaration)


State 56

   92 init_declarator_list: init_declarator_list COMMA . init_declarator
   93 init_declarator: . declarator
   94                | . declarator ASSIGNMENT initialiser
  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  134                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | . direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | . direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | . direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | . direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | . direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  148 pointer: . ASTERISK type_qualifier_list_opt
  149        | . ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 34
    LEFT_PARENTHESES  shift, and go to state 35
    ASTERISK          shift, and go to state 36

    init_declarator    go to state 71
    declarator         go to state 72
    direct_declarator  go to state 41
    pointer            go to state 42


State 57

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   94 init_declarator: declarator ASSIGNMENT . initialiser
  161 initialiser: . assignment_expression
  162            | . LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  163            | . LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 81
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 105
    initialiser                go to state 106


State 58

  211 declaration_list: declaration .

    $default  reduce using rule 211 (declaration_list)


State 59

   82 declaration: declaration_specifiers . init_declarator_list_opt SEMI_COLON
   83 init_declarator_list_opt: . init_declarator_list
   84                         | . %empty  [SEMI_COLON]
   91 init_declarator_list: . init_declarator
   92                     | . init_declarator_list COMMA init_declarator
   93 init_declarator: . declarator
   94                | . declarator ASSIGNMENT initialiser
  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  134                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | . direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | . direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | . direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | . direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | . direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  148 pointer: . ASTERISK type_qualifier_list_opt
  149        | . ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 34
    LEFT_PARENTHESES  shift, and go to state 35
    ASTERISK          shift, and go to state 36

    $default  reduce using rule 84 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 37
    init_declarator_list      go to state 38
    init_declarator           go to state 39
    declarator                go to state 72
    direct_declarator         go to state 41
    pointer                   go to state 42


State 60

  131 change_scope: . %empty
  208 function_definition: declaration_specifiers declarator declaration_list_opt . change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 131 (change_scope)

    change_scope  go to state 107


State 61

   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  209 declaration_list_opt: declaration_list .  [LEFT_CURLY_BRACKET]
  212 declaration_list: declaration_list . declaration

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    $default  reduce using rule 209 (declaration_list_opt)

    declaration              go to state 108
    declaration_specifiers   go to state 59
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 62

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  134 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET . type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator LEFT_SQUARE_BRACKET . type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | direct_declarator LEFT_SQUARE_BRACKET . assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator LEFT_SQUARE_BRACKET . RIGHT_SQUARE_BRACKET
  138                  | direct_declarator LEFT_SQUARE_BRACKET . STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator LEFT_SQUARE_BRACKET . STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | direct_declarator LEFT_SQUARE_BRACKET . type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | direct_declarator LEFT_SQUARE_BRACKET . type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | direct_declarator LEFT_SQUARE_BRACKET . ASTERISK RIGHT_SQUARE_BRACKET
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier

    CONST                 shift, and go to state 3
    RESTRICT              shift, and go to state 12
    SIZEOF                shift, and go to state 73
    STATIC                shift, and go to state 109
    VOLATILE              shift, and go to state 18
    IDENTIFIER            shift, and go to state 74
    INTEGER_CONSTANT      shift, and go to state 75
    FLOATING_CONSTANT     shift, and go to state 76
    CHARACTER_CONSTANT    shift, and go to state 77
    STRING_LITERAL        shift, and go to state 78
    INCREMENT             shift, and go to state 79
    RIGHT_SQUARE_BRACKET  shift, and go to state 110
    LEFT_PARENTHESES      shift, and go to state 80
    ASTERISK              shift, and go to state 111
    PLUS                  shift, and go to state 83
    MINUS                 shift, and go to state 84
    TILDE                 shift, and go to state 85
    EXCLAMATION           shift, and go to state 86
    DECREMENT             shift, and go to state 87
    BITWISE_AND           shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 112
    type_qualifier             go to state 52
    type_qualifier_list        go to state 113


State 63

  131 change_scope: . %empty  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, FLOATTYPE, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, _BOOL, _COMPLEX, _IMAGINARY, RIGHT_PARENTHESES]
  143 direct_declarator: direct_declarator LEFT_PARENTHESES . change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | direct_declarator LEFT_PARENTHESES . identifier_list RIGHT_PARENTHESES
  145                  | direct_declarator LEFT_PARENTHESES . change_scope RIGHT_PARENTHESES
  158 identifier_list: . IDENTIFIER
  159                | . identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 114

    $default  reduce using rule 131 (change_scope)

    change_scope     go to state 115
    identifier_list  go to state 116


State 64

  129 declarator: pointer direct_declarator .  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, FLOATTYPE, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, _BOOL, _COMPLEX, _IMAGINARY, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
  134 direct_declarator: direct_declarator . LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator . LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | direct_declarator . LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | direct_declarator . LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator . LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | direct_declarator . LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | direct_declarator . LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | direct_declarator . LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | direct_declarator . LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | direct_declarator . LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | direct_declarator . LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 62
    LEFT_PARENTHESES     shift, and go to state 63

    $default  reduce using rule 129 (declarator)


State 65

  123 enumerator: IDENTIFIER .  [COMMA, RIGHT_CURLY_BRACKET]
  124           | IDENTIFIER . ASSIGNMENT constant_expression

    ASSIGNMENT  shift, and go to state 117

    $default  reduce using rule 123 (enumerator)


State 66

  116 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list . RIGHT_CURLY_BRACKET
  117               | ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list . COMMA RIGHT_CURLY_BRACKET
  122 enumerator_list: enumerator_list . COMMA enumerator

    COMMA                shift, and go to state 118
    RIGHT_CURLY_BRACKET  shift, and go to state 119


State 67

  121 enumerator_list: enumerator .

    $default  reduce using rule 121 (enumerator_list)


State 68

  133 direct_declarator: LEFT_PARENTHESES declarator RIGHT_PARENTHESES .

    $default  reduce using rule 133 (direct_declarator)


State 69

  149 pointer: ASTERISK type_qualifier_list_opt pointer .

    $default  reduce using rule 149 (pointer)


State 70

  151 type_qualifier_list: type_qualifier_list type_qualifier .

    $default  reduce using rule 151 (type_qualifier_list)


State 71

   92 init_declarator_list: init_declarator_list COMMA init_declarator .

    $default  reduce using rule 92 (init_declarator_list)


State 72

   93 init_declarator: declarator .  [COMMA, SEMI_COLON]
   94                | declarator . ASSIGNMENT initialiser

    ASSIGNMENT  shift, and go to state 57

    $default  reduce using rule 93 (init_declarator)


State 73

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   24                 | SIZEOF . unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25                 | SIZEOF . LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 120
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 121
    unary_operator      go to state 92


State 74

    1 primary_expression: IDENTIFIER .

    $default  reduce using rule 1 (primary_expression)


State 75

    2 primary_expression: INTEGER_CONSTANT .

    $default  reduce using rule 2 (primary_expression)


State 76

    3 primary_expression: FLOATING_CONSTANT .

    $default  reduce using rule 3 (primary_expression)


State 77

    4 primary_expression: CHARACTER_CONSTANT .

    $default  reduce using rule 4 (primary_expression)


State 78

    5 primary_expression: STRING_LITERAL .

    $default  reduce using rule 5 (primary_expression)


State 79

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   21                 | INCREMENT . unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 122
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 123
    unary_operator      go to state 92


State 80

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6                   | LEFT_PARENTHESES . expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES . type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES . type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33                | LEFT_PARENTHESES . type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  160 type_name: . specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOATTYPE           shift, and go to state 7
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    _BOOL               shift, and go to state 19
    _COMPLEX            shift, and go to state 20
    _IMAGINARY          shift, and go to state 21
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 125
    type_specifier             go to state 126
    specifier_qualifier_list   go to state 127
    enum_specifier             go to state 26
    type_qualifier             go to state 128
    type_name                  go to state 129


State 81

  162 initialiser: LEFT_CURLY_BRACKET . initialiser_list RIGHT_CURLY_BRACKET
  163            | LEFT_CURLY_BRACKET . initialiser_list COMMA RIGHT_CURLY_BRACKET
  164 initialiser_list: . designation_opt initialiser
  165                 | . initialiser_list COMMA designation_opt initialiser
  166 designation_opt: . designation
  167                | . %empty  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  168 designation: . designator_list ASSIGNMENT
  169 designator_list: . designator
  170                | . designator_list designator
  171 designator: . LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  172           | . DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 130
    DOT                  shift, and go to state 131

    $default  reduce using rule 167 (designation_opt)

    initialiser_list  go to state 132
    designation_opt   go to state 133
    designation       go to state 134
    designator_list   go to state 135
    designator        go to state 136


State 82

   27 unary_operator: ASTERISK .

    $default  reduce using rule 27 (unary_operator)


State 83

   28 unary_operator: PLUS .

    $default  reduce using rule 28 (unary_operator)


State 84

   29 unary_operator: MINUS .

    $default  reduce using rule 29 (unary_operator)


State 85

   30 unary_operator: TILDE .

    $default  reduce using rule 30 (unary_operator)


State 86

   31 unary_operator: EXCLAMATION .

    $default  reduce using rule 31 (unary_operator)


State 87

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   22                 | DECREMENT . unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 122
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 137
    unary_operator      go to state 92


State 88

   26 unary_operator: BITWISE_AND .

    $default  reduce using rule 26 (unary_operator)


State 89

    7 postfix_expression: primary_expression .

    $default  reduce using rule 7 (postfix_expression)


State 90

    8 postfix_expression: postfix_expression . LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | postfix_expression . LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | postfix_expression . DOT IDENTIFIER
   11                   | postfix_expression . ARROW IDENTIFIER
   12                   | postfix_expression . INCREMENT
   13                   | postfix_expression . DECREMENT
   20 unary_expression: postfix_expression .  [SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]

    LEFT_SQUARE_BRACKET  shift, and go to state 138
    INCREMENT            shift, and go to state 139
    LEFT_PARENTHESES     shift, and go to state 140
    DOT                  shift, and go to state 141
    ARROW                shift, and go to state 142
    DECREMENT            shift, and go to state 143

    $default  reduce using rule 20 (unary_expression)


State 91

   32 cast_expression: unary_expression .  [SLASH, QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]
   67 assignment_expression: unary_expression . assignment_operator assignment_expression
   68 assignment_operator: . ASSIGNMENT
   69                    | . ASTERISK_ASSIGNMENT
   70                    | . SLASH_ASSIGNMENT
   71                    | . MODULO_ASSIGNMENT
   72                    | . PLUS_ASSIGNMENT
   73                    | . MINUS_ASSIGNMENT
   74                    | . LEFT_SHIFT_ASSIGNMENT
   75                    | . RIGHT_SHIFT_ASSIGNMENT
   76                    | . BITWISE_AND_ASSIGNMENT
   77                    | . BITWISE_XOR_ASSIGNMENT
   78                    | . BITWISE_OR_ASSIGNMENT

    ASSIGNMENT              shift, and go to state 144
    ASTERISK_ASSIGNMENT     shift, and go to state 145
    SLASH_ASSIGNMENT        shift, and go to state 146
    MODULO_ASSIGNMENT       shift, and go to state 147
    PLUS_ASSIGNMENT         shift, and go to state 148
    MINUS_ASSIGNMENT        shift, and go to state 149
    LEFT_SHIFT_ASSIGNMENT   shift, and go to state 150
    RIGHT_SHIFT_ASSIGNMENT  shift, and go to state 151
    BITWISE_AND_ASSIGNMENT  shift, and go to state 152
    BITWISE_OR_ASSIGNMENT   shift, and go to state 153
    BITWISE_XOR_ASSIGNMENT  shift, and go to state 154

    $default  reduce using rule 32 (cast_expression)

    assignment_operator  go to state 155


State 92

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   23                 | unary_operator . cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 157


State 93

   34 multiplicative_expression: cast_expression .

    $default  reduce using rule 34 (multiplicative_expression)


State 94

   35 multiplicative_expression: multiplicative_expression . ASTERISK cast_expression
   36                          | multiplicative_expression . SLASH cast_expression
   37                          | multiplicative_expression . MODULO cast_expression
   38 additive_expression: multiplicative_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 158
    ASTERISK  shift, and go to state 159
    MODULO    shift, and go to state 160

    $default  reduce using rule 38 (additive_expression)


State 95

   39 additive_expression: additive_expression . PLUS multiplicative_expression
   40                    | additive_expression . MINUS multiplicative_expression
   41 shift_expression: additive_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 161
    MINUS  shift, and go to state 162

    $default  reduce using rule 41 (shift_expression)


State 96

   42 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   43                 | shift_expression . RIGHT_SHIFT additive_expression
   44 relational_expression: shift_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 163
    RIGHT_SHIFT  shift, and go to state 164

    $default  reduce using rule 44 (relational_expression)


State 97

   45 relational_expression: relational_expression . LESS_THAN shift_expression
   46                      | relational_expression . GREATER_THAN shift_expression
   47                      | relational_expression . LESS_EQUAL_THAN shift_expression
   48                      | relational_expression . GREATER_EQUAL_THAN shift_expression
   49 equality_expression: relational_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 165
    GREATER_THAN        shift, and go to state 166
    LESS_EQUAL_THAN     shift, and go to state 167
    GREATER_EQUAL_THAN  shift, and go to state 168

    $default  reduce using rule 49 (equality_expression)


State 98

   50 equality_expression: equality_expression . EQUALS relational_expression
   51                    | equality_expression . NOT_EQUALS relational_expression
   52 AND_expression: equality_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 169
    NOT_EQUALS  shift, and go to state 170

    $default  reduce using rule 52 (AND_expression)


State 99

   53 AND_expression: AND_expression . BITWISE_AND equality_expression
   54 exclusive_OR_expression: AND_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_AND  shift, and go to state 171

    $default  reduce using rule 54 (exclusive_OR_expression)


State 100

   55 exclusive_OR_expression: exclusive_OR_expression . BITWISE_XOR AND_expression
   56 inclusive_OR_expression: exclusive_OR_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_XOR  shift, and go to state 172

    $default  reduce using rule 56 (inclusive_OR_expression)


State 101

   57 inclusive_OR_expression: inclusive_OR_expression . BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: inclusive_OR_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    BITWISE_OR  shift, and go to state 173

    $default  reduce using rule 60 (logical_AND_expression)


State 102

   61 logical_AND_expression: logical_AND_expression . LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: logical_AND_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 174

    $default  reduce using rule 62 (logical_OR_expression)


State 103

   59 N: . %empty  [QUESTION_MARK]
   63 logical_OR_expression: logical_OR_expression . LOGICAL_OR M logical_AND_expression
   64 conditional_expression: logical_OR_expression .  [COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES]
   65                       | logical_OR_expression . N QUESTION_MARK M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 175

    QUESTION_MARK  reduce using rule 59 (N)
    $default       reduce using rule 64 (conditional_expression)

    N  go to state 176


State 104

   66 assignment_expression: conditional_expression .

    $default  reduce using rule 66 (assignment_expression)


State 105

  161 initialiser: assignment_expression .

    $default  reduce using rule 161 (initialiser)


State 106

   94 init_declarator: declarator ASSIGNMENT initialiser .

    $default  reduce using rule 94 (init_declarator)


State 107

  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope . LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 177


State 108

  212 declaration_list: declaration_list declaration .

    $default  reduce using rule 212 (declaration_list)


State 109

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC . type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator LEFT_SQUARE_BRACKET STATIC . assignment_expression RIGHT_SQUARE_BRACKET
  150 type_qualifier_list: . type_qualifier
  151                    | . type_qualifier_list type_qualifier

    CONST               shift, and go to state 3
    RESTRICT            shift, and go to state 12
    SIZEOF              shift, and go to state 73
    VOLATILE            shift, and go to state 18
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 178
    type_qualifier             go to state 52
    type_qualifier_list        go to state 179


State 110

  137 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 137 (direct_declarator)


State 111

   27 unary_operator: ASTERISK .  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  142 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET ASTERISK . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 180

    $default  reduce using rule 27 (unary_operator)


State 112

  136 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 181


State 113

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  134 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list . assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list . RIGHT_SQUARE_BRACKET
  140                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list . STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list . ASTERISK RIGHT_SQUARE_BRACKET
  151 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST                 shift, and go to state 3
    RESTRICT              shift, and go to state 12
    SIZEOF                shift, and go to state 73
    STATIC                shift, and go to state 182
    VOLATILE              shift, and go to state 18
    IDENTIFIER            shift, and go to state 74
    INTEGER_CONSTANT      shift, and go to state 75
    FLOATING_CONSTANT     shift, and go to state 76
    CHARACTER_CONSTANT    shift, and go to state 77
    STRING_LITERAL        shift, and go to state 78
    INCREMENT             shift, and go to state 79
    RIGHT_SQUARE_BRACKET  shift, and go to state 183
    LEFT_PARENTHESES      shift, and go to state 80
    ASTERISK              shift, and go to state 184
    PLUS                  shift, and go to state 83
    MINUS                 shift, and go to state 84
    TILDE                 shift, and go to state 85
    EXCLAMATION           shift, and go to state 86
    DECREMENT             shift, and go to state 87
    BITWISE_AND           shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 185
    type_qualifier             go to state 70


State 114

  158 identifier_list: IDENTIFIER .

    $default  reduce using rule 158 (identifier_list)


State 115

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  143 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope . parameter_type_list RIGHT_PARENTHESES
  145                  | direct_declarator LEFT_PARENTHESES change_scope . RIGHT_PARENTHESES
  152 parameter_type_list: . parameter_list
  153                    | . parameter_list COMMA ELLIPSIS
  154 parameter_list: . parameter_declaration
  155               | . parameter_list COMMA parameter_declaration
  156 parameter_declaration: . declaration_specifiers declarator
  157                      | . declaration_specifiers

    AUTO               shift, and go to state 1
    CHARTYPE           shift, and go to state 2
    CONST              shift, and go to state 3
    DOUBLE             shift, and go to state 4
    ENUM               shift, and go to state 5
    EXTERN             shift, and go to state 6
    FLOATTYPE          shift, and go to state 7
    INLINE             shift, and go to state 8
    INTTYPE            shift, and go to state 9
    LONG               shift, and go to state 10
    REGISTER           shift, and go to state 11
    RESTRICT           shift, and go to state 12
    SHORT              shift, and go to state 13
    SIGNED             shift, and go to state 14
    STATIC             shift, and go to state 15
    UNSIGNED           shift, and go to state 16
    VOIDTYPE           shift, and go to state 17
    VOLATILE           shift, and go to state 18
    _BOOL              shift, and go to state 19
    _COMPLEX           shift, and go to state 20
    _IMAGINARY         shift, and go to state 21
    RIGHT_PARENTHESES  shift, and go to state 186

    declaration_specifiers   go to state 187
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_type_list      go to state 188
    parameter_list           go to state 189
    parameter_declaration    go to state 190


State 116

  144 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list . RIGHT_PARENTHESES
  159 identifier_list: identifier_list . COMMA IDENTIFIER

    COMMA              shift, and go to state 191
    RIGHT_PARENTHESES  shift, and go to state 192


State 117

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: . conditional_expression
  124 enumerator: IDENTIFIER ASSIGNMENT . constant_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 193
    constant_expression        go to state 194


State 118

  117 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA . RIGHT_CURLY_BRACKET
  122 enumerator_list: enumerator_list COMMA . enumerator
  123 enumerator: . IDENTIFIER
  124           | . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER           shift, and go to state 65
    RIGHT_CURLY_BRACKET  shift, and go to state 195

    enumerator  go to state 196


State 119

  116 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 116 (enum_specifier)


State 120

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6                   | LEFT_PARENTHESES . expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES . type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES . type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25                 | SIZEOF LEFT_PARENTHESES . type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  160 type_name: . specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOATTYPE           shift, and go to state 7
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    _BOOL               shift, and go to state 19
    _COMPLEX            shift, and go to state 20
    _IMAGINARY          shift, and go to state 21
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 125
    type_specifier             go to state 126
    specifier_qualifier_list   go to state 127
    enum_specifier             go to state 26
    type_qualifier             go to state 128
    type_name                  go to state 197


State 121

   24 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 24 (unary_expression)


State 122

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6                   | LEFT_PARENTHESES . expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES . type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES . type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  160 type_name: . specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    FLOATTYPE           shift, and go to state 7
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    _BOOL               shift, and go to state 19
    _COMPLEX            shift, and go to state 20
    _IMAGINARY          shift, and go to state 21
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 125
    type_specifier             go to state 126
    specifier_qualifier_list   go to state 127
    enum_specifier             go to state 26
    type_qualifier             go to state 128
    type_name                  go to state 198


State 123

   21 unary_expression: INCREMENT unary_expression .

    $default  reduce using rule 21 (unary_expression)


State 124

   79 expression: assignment_expression .

    $default  reduce using rule 79 (expression)


State 125

    6 primary_expression: LEFT_PARENTHESES expression . RIGHT_PARENTHESES
   80 expression: expression . COMMA assignment_expression

    COMMA              shift, and go to state 199
    RIGHT_PARENTHESES  shift, and go to state 200


State 126

   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  112                         | type_specifier . specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  114 specifier_qualifier_list_opt: . specifier_qualifier_list
  115                             | . %empty  [RIGHT_PARENTHESES]
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE

    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    FLOATTYPE   shift, and go to state 7
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    $default  reduce using rule 115 (specifier_qualifier_list_opt)

    type_specifier                go to state 126
    specifier_qualifier_list      go to state 201
    specifier_qualifier_list_opt  go to state 202
    enum_specifier                go to state 26
    type_qualifier                go to state 128


State 127

  160 type_name: specifier_qualifier_list .

    $default  reduce using rule 160 (type_name)


State 128

   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  112 specifier_qualifier_list: . type_specifier specifier_qualifier_list_opt
  113                         | . type_qualifier specifier_qualifier_list_opt
  113                         | type_qualifier . specifier_qualifier_list_opt
  114 specifier_qualifier_list_opt: . specifier_qualifier_list
  115                             | . %empty  [RIGHT_PARENTHESES]
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE

    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    FLOATTYPE   shift, and go to state 7
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21

    $default  reduce using rule 115 (specifier_qualifier_list_opt)

    type_specifier                go to state 126
    specifier_qualifier_list      go to state 201
    specifier_qualifier_list_opt  go to state 203
    enum_specifier                go to state 26
    type_qualifier                go to state 128


State 129

   14 postfix_expression: LEFT_PARENTHESES type_name . RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name . RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   33 cast_expression: LEFT_PARENTHESES type_name . RIGHT_PARENTHESES cast_expression

    RIGHT_PARENTHESES  shift, and go to state 204


State 130

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: . conditional_expression
  171 designator: LEFT_SQUARE_BRACKET . constant_expression RIGHT_SQUARE_BRACKET

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 193
    constant_expression        go to state 205


State 131

  172 designator: DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 206


State 132

  162 initialiser: LEFT_CURLY_BRACKET initialiser_list . RIGHT_CURLY_BRACKET
  163            | LEFT_CURLY_BRACKET initialiser_list . COMMA RIGHT_CURLY_BRACKET
  165 initialiser_list: initialiser_list . COMMA designation_opt initialiser

    COMMA                shift, and go to state 207
    RIGHT_CURLY_BRACKET  shift, and go to state 208


State 133

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  161 initialiser: . assignment_expression
  162            | . LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  163            | . LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  164 initialiser_list: designation_opt . initialiser

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 81
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 105
    initialiser                go to state 209


State 134

  166 designation_opt: designation .

    $default  reduce using rule 166 (designation_opt)


State 135

  168 designation: designator_list . ASSIGNMENT
  170 designator_list: designator_list . designator
  171 designator: . LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  172           | . DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 130
    ASSIGNMENT           shift, and go to state 210
    DOT                  shift, and go to state 131

    designator  go to state 211


State 136

  169 designator_list: designator .

    $default  reduce using rule 169 (designator_list)


State 137

   22 unary_expression: DECREMENT unary_expression .

    $default  reduce using rule 22 (unary_expression)


State 138

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | postfix_expression LEFT_SQUARE_BRACKET . expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 212


State 139

   12 postfix_expression: postfix_expression INCREMENT .

    $default  reduce using rule 12 (postfix_expression)


State 140

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | postfix_expression LEFT_PARENTHESES . argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 argument_expression_list_opt: . argument_expression_list
   17                             | . %empty  [RIGHT_PARENTHESES]
   18 argument_expression_list: . assignment_expression
   19                         | . argument_expression_list COMMA assignment_expression
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 17 (argument_expression_list_opt)

    primary_expression            go to state 89
    postfix_expression            go to state 90
    argument_expression_list_opt  go to state 213
    argument_expression_list      go to state 214
    unary_expression              go to state 91
    unary_operator                go to state 92
    cast_expression               go to state 93
    multiplicative_expression     go to state 94
    additive_expression           go to state 95
    shift_expression              go to state 96
    relational_expression         go to state 97
    equality_expression           go to state 98
    AND_expression                go to state 99
    exclusive_OR_expression       go to state 100
    inclusive_OR_expression       go to state 101
    logical_AND_expression        go to state 102
    logical_OR_expression         go to state 103
    conditional_expression        go to state 104
    assignment_expression         go to state 215


State 141

   10 postfix_expression: postfix_expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 216


State 142

   11 postfix_expression: postfix_expression ARROW . IDENTIFIER

    IDENTIFIER  shift, and go to state 217


State 143

   13 postfix_expression: postfix_expression DECREMENT .

    $default  reduce using rule 13 (postfix_expression)


State 144

   68 assignment_operator: ASSIGNMENT .

    $default  reduce using rule 68 (assignment_operator)


State 145

   69 assignment_operator: ASTERISK_ASSIGNMENT .

    $default  reduce using rule 69 (assignment_operator)


State 146

   70 assignment_operator: SLASH_ASSIGNMENT .

    $default  reduce using rule 70 (assignment_operator)


State 147

   71 assignment_operator: MODULO_ASSIGNMENT .

    $default  reduce using rule 71 (assignment_operator)


State 148

   72 assignment_operator: PLUS_ASSIGNMENT .

    $default  reduce using rule 72 (assignment_operator)


State 149

   73 assignment_operator: MINUS_ASSIGNMENT .

    $default  reduce using rule 73 (assignment_operator)


State 150

   74 assignment_operator: LEFT_SHIFT_ASSIGNMENT .

    $default  reduce using rule 74 (assignment_operator)


State 151

   75 assignment_operator: RIGHT_SHIFT_ASSIGNMENT .

    $default  reduce using rule 75 (assignment_operator)


State 152

   76 assignment_operator: BITWISE_AND_ASSIGNMENT .

    $default  reduce using rule 76 (assignment_operator)


State 153

   78 assignment_operator: BITWISE_OR_ASSIGNMENT .

    $default  reduce using rule 78 (assignment_operator)


State 154

   77 assignment_operator: BITWISE_XOR_ASSIGNMENT .

    $default  reduce using rule 77 (assignment_operator)


State 155

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   67                      | unary_expression assignment_operator . assignment_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 218


State 156

   32 cast_expression: unary_expression .

    $default  reduce using rule 32 (cast_expression)


State 157

   23 unary_expression: unary_operator cast_expression .

    $default  reduce using rule 23 (unary_expression)


State 158

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   36 multiplicative_expression: multiplicative_expression SLASH . cast_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 219


State 159

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   35 multiplicative_expression: multiplicative_expression ASTERISK . cast_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 220


State 160

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   37 multiplicative_expression: multiplicative_expression MODULO . cast_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 221


State 161

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   39 additive_expression: additive_expression PLUS . multiplicative_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 222


State 162

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   40 additive_expression: additive_expression MINUS . multiplicative_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 223


State 163

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   42 shift_expression: shift_expression LEFT_SHIFT . additive_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 224


State 164

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   43 shift_expression: shift_expression RIGHT_SHIFT . additive_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 225


State 165

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   45 relational_expression: relational_expression LESS_THAN . shift_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 226


State 166

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   46 relational_expression: relational_expression GREATER_THAN . shift_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 227


State 167

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression LESS_EQUAL_THAN . shift_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 228


State 168

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   48 relational_expression: relational_expression GREATER_EQUAL_THAN . shift_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 229


State 169

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   50 equality_expression: equality_expression EQUALS . relational_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 230


State 170

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   51 equality_expression: equality_expression NOT_EQUALS . relational_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 231


State 171

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   53 AND_expression: AND_expression BITWISE_AND . equality_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 232


State 172

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   55 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR . AND_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 233


State 173

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   57 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR . exclusive_OR_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 234


State 174

   58 M: . %empty
   61 logical_AND_expression: logical_AND_expression LOGICAL_AND . M inclusive_OR_expression

    $default  reduce using rule 58 (M)

    M  go to state 235


State 175

   58 M: . %empty
   63 logical_OR_expression: logical_OR_expression LOGICAL_OR . M logical_AND_expression

    $default  reduce using rule 58 (M)

    M  go to state 236


State 176

   65 conditional_expression: logical_OR_expression N . QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 237


State 177

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  184 block_item_list_opt: . block_item_list
  185                    | . %empty  [RIGHT_CURLY_BRACKET]
  186 block_item_list: . block_item
  187                | . block_item_list M block_item
  188 block_item: . declaration
  189           | . statement
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON
  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET . block_item_list_opt RIGHT_CURLY_BRACKET

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOATTYPE           shift, and go to state 7
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    INLINE              shift, and go to state 8
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 246
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 247
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 248
    _BOOL               shift, and go to state 19
    _COMPLEX            shift, and go to state 20
    _IMAGINARY          shift, and go to state 21
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    SEMI_COLON  reduce using rule 192 (expression_opt)
    $default    reduce using rule 185 (block_item_list_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    declaration                go to state 252
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 253
    labeled_statement          go to state 254
    compound_statement         go to state 255
    block_item_list_opt        go to state 256
    block_item_list            go to state 257
    block_item                 go to state 258
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 178

  139 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 264


State 179

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list . assignment_expression RIGHT_SQUARE_BRACKET
  151 type_qualifier_list: type_qualifier_list . type_qualifier

    CONST               shift, and go to state 3
    RESTRICT            shift, and go to state 12
    SIZEOF              shift, and go to state 73
    VOLATILE            shift, and go to state 18
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 265
    type_qualifier             go to state 70


State 180

  142 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 142 (direct_declarator)


State 181

  136 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 136 (direct_declarator)


State 182

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  140 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC . assignment_expression RIGHT_SQUARE_BRACKET

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 266


State 183

  135 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 135 (direct_declarator)


State 184

   27 unary_operator: ASTERISK .  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  141 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 267

    $default  reduce using rule 27 (unary_operator)


State 185

  134 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 268


State 186

  145 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES .

    $default  reduce using rule 145 (direct_declarator)


State 187

  129 declarator: . pointer direct_declarator
  130           | . direct_declarator
  132 direct_declarator: . IDENTIFIER
  133                  | . LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  134                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  135                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  136                  | . direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  137                  | . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  138                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  139                  | . direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  140                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  141                  | . direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  142                  | . direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  143                  | . direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  144                  | . direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  145                  | . direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  148 pointer: . ASTERISK type_qualifier_list_opt
  149        | . ASTERISK type_qualifier_list_opt pointer
  156 parameter_declaration: declaration_specifiers . declarator
  157                      | declaration_specifiers .  [COMMA, RIGHT_PARENTHESES]

    IDENTIFIER        shift, and go to state 34
    LEFT_PARENTHESES  shift, and go to state 35
    ASTERISK          shift, and go to state 36

    $default  reduce using rule 157 (parameter_declaration)

    declarator         go to state 269
    direct_declarator  go to state 41
    pointer            go to state 42


State 188

  143 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list . RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 270


State 189

  152 parameter_type_list: parameter_list .  [RIGHT_PARENTHESES]
  153                    | parameter_list . COMMA ELLIPSIS
  155 parameter_list: parameter_list . COMMA parameter_declaration

    COMMA  shift, and go to state 271

    $default  reduce using rule 152 (parameter_type_list)


State 190

  154 parameter_list: parameter_declaration .

    $default  reduce using rule 154 (parameter_list)


State 191

  159 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 272


State 192

  144 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES .

    $default  reduce using rule 144 (direct_declarator)


State 193

   81 constant_expression: conditional_expression .

    $default  reduce using rule 81 (constant_expression)


State 194

  124 enumerator: IDENTIFIER ASSIGNMENT constant_expression .

    $default  reduce using rule 124 (enumerator)


State 195

  117 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET .

    $default  reduce using rule 117 (enum_specifier)


State 196

  122 enumerator_list: enumerator_list COMMA enumerator .

    $default  reduce using rule 122 (enumerator_list)


State 197

   14 postfix_expression: LEFT_PARENTHESES type_name . RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name . RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   25 unary_expression: SIZEOF LEFT_PARENTHESES type_name . RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 273


State 198

   14 postfix_expression: LEFT_PARENTHESES type_name . RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name . RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    RIGHT_PARENTHESES  shift, and go to state 274


State 199

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   80 expression: expression COMMA . assignment_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 275


State 200

    6 primary_expression: LEFT_PARENTHESES expression RIGHT_PARENTHESES .

    $default  reduce using rule 6 (primary_expression)


State 201

  114 specifier_qualifier_list_opt: specifier_qualifier_list .

    $default  reduce using rule 114 (specifier_qualifier_list_opt)


State 202

  112 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt .

    $default  reduce using rule 112 (specifier_qualifier_list)


State 203

  113 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt .

    $default  reduce using rule 113 (specifier_qualifier_list)


State 204

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES . LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES . LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33                | LEFT_PARENTHESES type_name RIGHT_PARENTHESES . cast_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 276
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 156
    unary_operator      go to state 92
    cast_expression     go to state 277


State 205

  171 designator: LEFT_SQUARE_BRACKET constant_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 278


State 206

  172 designator: DOT IDENTIFIER .

    $default  reduce using rule 172 (designator)


State 207

  163 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA . RIGHT_CURLY_BRACKET
  165 initialiser_list: initialiser_list COMMA . designation_opt initialiser
  166 designation_opt: . designation
  167                | . %empty  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  168 designation: . designator_list ASSIGNMENT
  169 designator_list: . designator
  170                | . designator_list designator
  171 designator: . LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  172           | . DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 130
    RIGHT_CURLY_BRACKET  shift, and go to state 279
    DOT                  shift, and go to state 131

    $default  reduce using rule 167 (designation_opt)

    designation_opt  go to state 280
    designation      go to state 134
    designator_list  go to state 135
    designator       go to state 136


State 208

  162 initialiser: LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 162 (initialiser)


State 209

  164 initialiser_list: designation_opt initialiser .

    $default  reduce using rule 164 (initialiser_list)


State 210

  168 designation: designator_list ASSIGNMENT .

    $default  reduce using rule 168 (designation)


State 211

  170 designator_list: designator_list designator .

    $default  reduce using rule 170 (designator_list)


State 212

    8 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression . RIGHT_SQUARE_BRACKET
   80 expression: expression . COMMA assignment_expression

    COMMA                 shift, and go to state 199
    RIGHT_SQUARE_BRACKET  shift, and go to state 281


State 213

    9 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt . RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 282


State 214

   16 argument_expression_list_opt: argument_expression_list .  [RIGHT_PARENTHESES]
   19 argument_expression_list: argument_expression_list . COMMA assignment_expression

    COMMA  shift, and go to state 283

    $default  reduce using rule 16 (argument_expression_list_opt)


State 215

   18 argument_expression_list: assignment_expression .

    $default  reduce using rule 18 (argument_expression_list)


State 216

   10 postfix_expression: postfix_expression DOT IDENTIFIER .

    $default  reduce using rule 10 (postfix_expression)


State 217

   11 postfix_expression: postfix_expression ARROW IDENTIFIER .

    $default  reduce using rule 11 (postfix_expression)


State 218

   67 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 67 (assignment_expression)


State 219

   36 multiplicative_expression: multiplicative_expression SLASH cast_expression .

    $default  reduce using rule 36 (multiplicative_expression)


State 220

   35 multiplicative_expression: multiplicative_expression ASTERISK cast_expression .

    $default  reduce using rule 35 (multiplicative_expression)


State 221

   37 multiplicative_expression: multiplicative_expression MODULO cast_expression .

    $default  reduce using rule 37 (multiplicative_expression)


State 222

   35 multiplicative_expression: multiplicative_expression . ASTERISK cast_expression
   36                          | multiplicative_expression . SLASH cast_expression
   37                          | multiplicative_expression . MODULO cast_expression
   39 additive_expression: additive_expression PLUS multiplicative_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 158
    ASTERISK  shift, and go to state 159
    MODULO    shift, and go to state 160

    $default  reduce using rule 39 (additive_expression)


State 223

   35 multiplicative_expression: multiplicative_expression . ASTERISK cast_expression
   36                          | multiplicative_expression . SLASH cast_expression
   37                          | multiplicative_expression . MODULO cast_expression
   40 additive_expression: additive_expression MINUS multiplicative_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 158
    ASTERISK  shift, and go to state 159
    MODULO    shift, and go to state 160

    $default  reduce using rule 40 (additive_expression)


State 224

   39 additive_expression: additive_expression . PLUS multiplicative_expression
   40                    | additive_expression . MINUS multiplicative_expression
   42 shift_expression: shift_expression LEFT_SHIFT additive_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 161
    MINUS  shift, and go to state 162

    $default  reduce using rule 42 (shift_expression)


State 225

   39 additive_expression: additive_expression . PLUS multiplicative_expression
   40                    | additive_expression . MINUS multiplicative_expression
   43 shift_expression: shift_expression RIGHT_SHIFT additive_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 161
    MINUS  shift, and go to state 162

    $default  reduce using rule 43 (shift_expression)


State 226

   42 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   43                 | shift_expression . RIGHT_SHIFT additive_expression
   45 relational_expression: relational_expression LESS_THAN shift_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 163
    RIGHT_SHIFT  shift, and go to state 164

    $default  reduce using rule 45 (relational_expression)


State 227

   42 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   43                 | shift_expression . RIGHT_SHIFT additive_expression
   46 relational_expression: relational_expression GREATER_THAN shift_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 163
    RIGHT_SHIFT  shift, and go to state 164

    $default  reduce using rule 46 (relational_expression)


State 228

   42 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   43                 | shift_expression . RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression LESS_EQUAL_THAN shift_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 163
    RIGHT_SHIFT  shift, and go to state 164

    $default  reduce using rule 47 (relational_expression)


State 229

   42 shift_expression: shift_expression . LEFT_SHIFT additive_expression
   43                 | shift_expression . RIGHT_SHIFT additive_expression
   48 relational_expression: relational_expression GREATER_EQUAL_THAN shift_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 163
    RIGHT_SHIFT  shift, and go to state 164

    $default  reduce using rule 48 (relational_expression)


State 230

   45 relational_expression: relational_expression . LESS_THAN shift_expression
   46                      | relational_expression . GREATER_THAN shift_expression
   47                      | relational_expression . LESS_EQUAL_THAN shift_expression
   48                      | relational_expression . GREATER_EQUAL_THAN shift_expression
   50 equality_expression: equality_expression EQUALS relational_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 165
    GREATER_THAN        shift, and go to state 166
    LESS_EQUAL_THAN     shift, and go to state 167
    GREATER_EQUAL_THAN  shift, and go to state 168

    $default  reduce using rule 50 (equality_expression)


State 231

   45 relational_expression: relational_expression . LESS_THAN shift_expression
   46                      | relational_expression . GREATER_THAN shift_expression
   47                      | relational_expression . LESS_EQUAL_THAN shift_expression
   48                      | relational_expression . GREATER_EQUAL_THAN shift_expression
   51 equality_expression: equality_expression NOT_EQUALS relational_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 165
    GREATER_THAN        shift, and go to state 166
    LESS_EQUAL_THAN     shift, and go to state 167
    GREATER_EQUAL_THAN  shift, and go to state 168

    $default  reduce using rule 51 (equality_expression)


State 232

   50 equality_expression: equality_expression . EQUALS relational_expression
   51                    | equality_expression . NOT_EQUALS relational_expression
   53 AND_expression: AND_expression BITWISE_AND equality_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 169
    NOT_EQUALS  shift, and go to state 170

    $default  reduce using rule 53 (AND_expression)


State 233

   53 AND_expression: AND_expression . BITWISE_AND equality_expression
   55 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR AND_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_AND  shift, and go to state 171

    $default  reduce using rule 55 (exclusive_OR_expression)


State 234

   55 exclusive_OR_expression: exclusive_OR_expression . BITWISE_XOR AND_expression
   57 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR exclusive_OR_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_XOR  shift, and go to state 172

    $default  reduce using rule 57 (inclusive_OR_expression)


State 235

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   61 logical_AND_expression: logical_AND_expression LOGICAL_AND M . inclusive_OR_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 284


State 236

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   63 logical_OR_expression: logical_OR_expression LOGICAL_OR M . logical_AND_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 285


State 237

   58 M: . %empty
   65 conditional_expression: logical_OR_expression N QUESTION_MARK . M expression N COLON M conditional_expression

    $default  reduce using rule 58 (M)

    M  go to state 286


State 238

  202 jump_statement: BREAK . SEMI_COLON

    SEMI_COLON  shift, and go to state 287


State 239

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   81 constant_expression: . conditional_expression
  180 labeled_statement: CASE . constant_expression COLON statement

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 193
    constant_expression        go to state 288


State 240

  201 jump_statement: CONTINUE . SEMI_COLON

    SEMI_COLON  shift, and go to state 289


State 241

  181 labeled_statement: DEFAULT . COLON statement

    COLON  shift, and go to state 290


State 242

   58 M: . %empty
  197 iteration_statement: DO . M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    $default  reduce using rule 58 (M)

    M  go to state 291


State 243

  198 iteration_statement: FOR . LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | FOR . LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    LEFT_PARENTHESES  shift, and go to state 292


State 244

  200 jump_statement: GOTO . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 293


State 245

  193 selection_statement: IF . LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | IF . LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement

    LEFT_PARENTHESES  shift, and go to state 294


State 246

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  203 jump_statement: RETURN . expression_opt SEMI_COLON

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    expression_opt             go to state 295


State 247

  195 selection_statement: SWITCH . LEFT_PARENTHESES expression RIGHT_PARENTHESES statement

    LEFT_PARENTHESES  shift, and go to state 296


State 248

   58 M: . %empty
  196 iteration_statement: WHILE . M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement

    $default  reduce using rule 58 (M)

    M  go to state 297


State 249

    1 primary_expression: IDENTIFIER .  [LEFT_SQUARE_BRACKET, INCREMENT, SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, LEFT_PARENTHESES, DOT, ARROW, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, DECREMENT, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]
  179 labeled_statement: IDENTIFIER . COLON statement

    COLON  shift, and go to state 298

    $default  reduce using rule 1 (primary_expression)


State 250

  182 change_block: . %empty
  183 compound_statement: LEFT_CURLY_BRACKET . change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 182 (change_block)

    change_block  go to state 299


State 251

   80 expression: expression . COMMA assignment_expression
  191 expression_opt: expression .  [SEMI_COLON, RIGHT_PARENTHESES]

    COMMA  shift, and go to state 199

    $default  reduce using rule 191 (expression_opt)


State 252

  188 block_item: declaration .

    $default  reduce using rule 188 (block_item)


State 253

  189 block_item: statement .

    $default  reduce using rule 189 (block_item)


State 254

  173 statement: labeled_statement .

    $default  reduce using rule 173 (statement)


State 255

  174 statement: compound_statement .

    $default  reduce using rule 174 (statement)


State 256

  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 300


State 257

   58 M: . %empty  [AUTO, BREAK, CASE, CHARTYPE, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ENUM, EXTERN, FLOATTYPE, FOR, GOTO, IF, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, RETURN, SHORT, SIGNED, SIZEOF, STATIC, SWITCH, UNSIGNED, VOIDTYPE, VOLATILE, WHILE, _BOOL, _COMPLEX, _IMAGINARY, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, SEMI_COLON, DECREMENT, BITWISE_AND]
  184 block_item_list_opt: block_item_list .  [RIGHT_CURLY_BRACKET]
  187 block_item_list: block_item_list . M block_item

    RIGHT_CURLY_BRACKET  reduce using rule 184 (block_item_list_opt)
    $default             reduce using rule 58 (M)

    M  go to state 301


State 258

  186 block_item_list: block_item .

    $default  reduce using rule 186 (block_item_list)


State 259

  175 statement: expression_statement .

    $default  reduce using rule 175 (statement)


State 260

  190 expression_statement: expression_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 302


State 261

  176 statement: selection_statement .

    $default  reduce using rule 176 (statement)


State 262

  177 statement: iteration_statement .

    $default  reduce using rule 177 (statement)


State 263

  178 statement: jump_statement .

    $default  reduce using rule 178 (statement)


State 264

  139 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 139 (direct_declarator)


State 265

  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 303


State 266

  140 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 304


State 267

  141 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 141 (direct_declarator)


State 268

  134 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 134 (direct_declarator)


State 269

  156 parameter_declaration: declaration_specifiers declarator .

    $default  reduce using rule 156 (parameter_declaration)


State 270

  143 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES .

    $default  reduce using rule 143 (direct_declarator)


State 271

   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  153 parameter_type_list: parameter_list COMMA . ELLIPSIS
  155 parameter_list: parameter_list COMMA . parameter_declaration
  156 parameter_declaration: . declaration_specifiers declarator
  157                      | . declaration_specifiers

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    FLOATTYPE   shift, and go to state 7
    INLINE      shift, and go to state 8
    INTTYPE     shift, and go to state 9
    LONG        shift, and go to state 10
    REGISTER    shift, and go to state 11
    RESTRICT    shift, and go to state 12
    SHORT       shift, and go to state 13
    SIGNED      shift, and go to state 14
    STATIC      shift, and go to state 15
    UNSIGNED    shift, and go to state 16
    VOIDTYPE    shift, and go to state 17
    VOLATILE    shift, and go to state 18
    _BOOL       shift, and go to state 19
    _COMPLEX    shift, and go to state 20
    _IMAGINARY  shift, and go to state 21
    ELLIPSIS    shift, and go to state 305

    declaration_specifiers   go to state 187
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_declaration    go to state 306


State 272

  159 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 159 (identifier_list)


State 273

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES . LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES . LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   25 unary_expression: SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES .  [SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]

    LEFT_CURLY_BRACKET  shift, and go to state 276

    $default  reduce using rule 25 (unary_expression)


State 274

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES . LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES . LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 276


State 275

   80 expression: expression COMMA assignment_expression .

    $default  reduce using rule 80 (expression)


State 276

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET . initialiser_list RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET . initialiser_list COMMA RIGHT_CURLY_BRACKET
  164 initialiser_list: . designation_opt initialiser
  165                 | . initialiser_list COMMA designation_opt initialiser
  166 designation_opt: . designation
  167                | . %empty  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  168 designation: . designator_list ASSIGNMENT
  169 designator_list: . designator
  170                | . designator_list designator
  171 designator: . LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  172           | . DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 130
    DOT                  shift, and go to state 131

    $default  reduce using rule 167 (designation_opt)

    initialiser_list  go to state 307
    designation_opt   go to state 133
    designation       go to state 134
    designator_list   go to state 135
    designator        go to state 136


State 277

   33 cast_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression .

    $default  reduce using rule 33 (cast_expression)


State 278

  171 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 171 (designator)


State 279

  163 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET .

    $default  reduce using rule 163 (initialiser)


State 280

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
  161 initialiser: . assignment_expression
  162            | . LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  163            | . LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  165 initialiser_list: initialiser_list COMMA designation_opt . initialiser

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 81
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 105
    initialiser                go to state 308


State 281

    8 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 8 (postfix_expression)


State 282

    9 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES .

    $default  reduce using rule 9 (postfix_expression)


State 283

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 argument_expression_list: argument_expression_list COMMA . assignment_expression
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 309


State 284

   57 inclusive_OR_expression: inclusive_OR_expression . BITWISE_OR exclusive_OR_expression
   61 logical_AND_expression: logical_AND_expression LOGICAL_AND M inclusive_OR_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    BITWISE_OR  shift, and go to state 173

    $default  reduce using rule 61 (logical_AND_expression)


State 285

   61 logical_AND_expression: logical_AND_expression . LOGICAL_AND M inclusive_OR_expression
   63 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression .  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 174

    $default  reduce using rule 63 (logical_OR_expression)


State 286

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65                       | logical_OR_expression N QUESTION_MARK M . expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 310


State 287

  202 jump_statement: BREAK SEMI_COLON .

    $default  reduce using rule 202 (jump_statement)


State 288

  180 labeled_statement: CASE constant_expression . COLON statement

    COLON  shift, and go to state 311


State 289

  201 jump_statement: CONTINUE SEMI_COLON .

    $default  reduce using rule 201 (jump_statement)


State 290

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  181                  | DEFAULT COLON . statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 312
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 291

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  197                    | DO M . statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 313
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 292

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  198 iteration_statement: FOR LEFT_PARENTHESES . expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | FOR LEFT_PARENTHESES . declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    AUTO                shift, and go to state 1
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOATTYPE           shift, and go to state 7
    INLINE              shift, and go to state 8
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    _BOOL               shift, and go to state 19
    _COMPLEX            shift, and go to state 20
    _IMAGINARY          shift, and go to state 21
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    declaration                go to state 314
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    expression_opt             go to state 315


State 293

  200 jump_statement: GOTO IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 316


State 294

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  193 selection_statement: IF LEFT_PARENTHESES . expression N RIGHT_PARENTHESES M statement N
  194                    | IF LEFT_PARENTHESES . expression N RIGHT_PARENTHESES M statement N ELSE M statement

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 317


State 295

  203 jump_statement: RETURN expression_opt . SEMI_COLON

    SEMI_COLON  shift, and go to state 318


State 296

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  195 selection_statement: SWITCH LEFT_PARENTHESES . expression RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 319


State 297

  196 iteration_statement: WHILE M . LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement

    LEFT_PARENTHESES  shift, and go to state 320


State 298

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  179                  | IDENTIFIER COLON . statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 321
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 299

  131 change_scope: . %empty
  183 compound_statement: LEFT_CURLY_BRACKET change_block . change_scope block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 131 (change_scope)

    change_scope  go to state 322


State 300

  208 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET .

    $default  reduce using rule 208 (function_definition)


State 301

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  187 block_item_list: block_item_list M . block_item
  188 block_item: . declaration
  189           | . statement
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOATTYPE           shift, and go to state 7
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    INLINE              shift, and go to state 8
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 246
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 247
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 248
    _BOOL               shift, and go to state 19
    _COMPLEX            shift, and go to state 20
    _IMAGINARY          shift, and go to state 21
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    declaration                go to state 252
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 253
    labeled_statement          go to state 254
    compound_statement         go to state 255
    block_item                 go to state 323
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 302

  190 expression_statement: expression_opt SEMI_COLON .

    $default  reduce using rule 190 (expression_statement)


State 303

  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 138 (direct_declarator)


State 304

  140 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 140 (direct_declarator)


State 305

  153 parameter_type_list: parameter_list COMMA ELLIPSIS .

    $default  reduce using rule 153 (parameter_type_list)


State 306

  155 parameter_list: parameter_list COMMA parameter_declaration .

    $default  reduce using rule 155 (parameter_list)


State 307

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list . RIGHT_CURLY_BRACKET
   15                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list . COMMA RIGHT_CURLY_BRACKET
  165 initialiser_list: initialiser_list . COMMA designation_opt initialiser

    COMMA                shift, and go to state 324
    RIGHT_CURLY_BRACKET  shift, and go to state 325


State 308

  165 initialiser_list: initialiser_list COMMA designation_opt initialiser .

    $default  reduce using rule 165 (initialiser_list)


State 309

   19 argument_expression_list: argument_expression_list COMMA assignment_expression .

    $default  reduce using rule 19 (argument_expression_list)


State 310

   59 N: . %empty  [COLON]
   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression . N COLON M conditional_expression
   80 expression: expression . COMMA assignment_expression

    COMMA  shift, and go to state 199

    $default  reduce using rule 59 (N)

    N  go to state 326


State 311

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  180                  | CASE constant_expression COLON . statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 327
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 312

  181 labeled_statement: DEFAULT COLON statement .

    $default  reduce using rule 181 (labeled_statement)


State 313

   58 M: . %empty
  197 iteration_statement: DO M statement . M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    $default  reduce using rule 58 (M)

    M  go to state 328


State 314

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  199 iteration_statement: FOR LEFT_PARENTHESES declaration . expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    expression_opt             go to state 329


State 315

  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt . SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 330


State 316

  200 jump_statement: GOTO IDENTIFIER SEMI_COLON .

    $default  reduce using rule 200 (jump_statement)


State 317

   59 N: . %empty  [RIGHT_PARENTHESES]
   80 expression: expression . COMMA assignment_expression
  193 selection_statement: IF LEFT_PARENTHESES expression . N RIGHT_PARENTHESES M statement N
  194                    | IF LEFT_PARENTHESES expression . N RIGHT_PARENTHESES M statement N ELSE M statement

    COMMA  shift, and go to state 199

    $default  reduce using rule 59 (N)

    N  go to state 331


State 318

  203 jump_statement: RETURN expression_opt SEMI_COLON .

    $default  reduce using rule 203 (jump_statement)


State 319

   80 expression: expression . COMMA assignment_expression
  195 selection_statement: SWITCH LEFT_PARENTHESES expression . RIGHT_PARENTHESES statement

    COMMA              shift, and go to state 199
    RIGHT_PARENTHESES  shift, and go to state 332


State 320

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  196 iteration_statement: WHILE M LEFT_PARENTHESES . expression RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 333


State 321

  179 labeled_statement: IDENTIFIER COLON statement .

    $default  reduce using rule 179 (labeled_statement)


State 322

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
   82 declaration: . declaration_specifiers init_declarator_list_opt SEMI_COLON
   85 declaration_specifiers: . storage_class_specifier declaration_specifiers_opt
   86                       | . type_specifier declaration_specifiers_opt
   87                       | . type_qualifier declaration_specifiers_opt
   88                       | . function_specifier declaration_specifiers_opt
   95 storage_class_specifier: . EXTERN
   96                        | . STATIC
   97                        | . AUTO
   98                        | . REGISTER
   99 type_specifier: . VOIDTYPE
  100               | . CHARTYPE
  101               | . SHORT
  102               | . INTTYPE
  103               | . LONG
  104               | . FLOATTYPE
  105               | . DOUBLE
  106               | . SIGNED
  107               | . UNSIGNED
  108               | . _BOOL
  109               | . _COMPLEX
  110               | . _IMAGINARY
  111               | . enum_specifier
  116 enum_specifier: . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  117               | . ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  118               | . ENUM IDENTIFIER
  125 type_qualifier: . CONST
  126               | . RESTRICT
  127               | . VOLATILE
  128 function_specifier: . INLINE
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  183                   | LEFT_CURLY_BRACKET change_block change_scope . block_item_list_opt RIGHT_CURLY_BRACKET
  184 block_item_list_opt: . block_item_list
  185                    | . %empty  [RIGHT_CURLY_BRACKET]
  186 block_item_list: . block_item
  187                | . block_item_list M block_item
  188 block_item: . declaration
  189           | . statement
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FLOATTYPE           shift, and go to state 7
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    INLINE              shift, and go to state 8
    INTTYPE             shift, and go to state 9
    LONG                shift, and go to state 10
    REGISTER            shift, and go to state 11
    RESTRICT            shift, and go to state 12
    RETURN              shift, and go to state 246
    SHORT               shift, and go to state 13
    SIGNED              shift, and go to state 14
    SIZEOF              shift, and go to state 73
    STATIC              shift, and go to state 15
    SWITCH              shift, and go to state 247
    UNSIGNED            shift, and go to state 16
    VOIDTYPE            shift, and go to state 17
    VOLATILE            shift, and go to state 18
    WHILE               shift, and go to state 248
    _BOOL               shift, and go to state 19
    _COMPLEX            shift, and go to state 20
    _IMAGINARY          shift, and go to state 21
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    SEMI_COLON  reduce using rule 192 (expression_opt)
    $default    reduce using rule 185 (block_item_list_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    declaration                go to state 252
    declaration_specifiers     go to state 59
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 253
    labeled_statement          go to state 254
    compound_statement         go to state 255
    block_item_list_opt        go to state 334
    block_item_list            go to state 257
    block_item                 go to state 258
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 323

  187 block_item_list: block_item_list M block_item .

    $default  reduce using rule 187 (block_item_list)


State 324

   15 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA . RIGHT_CURLY_BRACKET
  165 initialiser_list: initialiser_list COMMA . designation_opt initialiser
  166 designation_opt: . designation
  167                | . %empty  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  168 designation: . designator_list ASSIGNMENT
  169 designator_list: . designator
  170                | . designator_list designator
  171 designator: . LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  172           | . DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 130
    RIGHT_CURLY_BRACKET  shift, and go to state 335
    DOT                  shift, and go to state 131

    $default  reduce using rule 167 (designation_opt)

    designation_opt  go to state 280
    designation      go to state 134
    designator_list  go to state 135
    designator       go to state 136


State 325

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET .

    $default  reduce using rule 14 (postfix_expression)


State 326

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N . COLON M conditional_expression

    COLON  shift, and go to state 336


State 327

  180 labeled_statement: CASE constant_expression COLON statement .

    $default  reduce using rule 180 (labeled_statement)


State 328

  197 iteration_statement: DO M statement M . WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    WHILE  shift, and go to state 337


State 329

  199 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt . SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    SEMI_COLON  shift, and go to state 338


State 330

   58 M: . %empty
  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON . M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 58 (M)

    M  go to state 339


State 331

  193 selection_statement: IF LEFT_PARENTHESES expression N . RIGHT_PARENTHESES M statement N
  194                    | IF LEFT_PARENTHESES expression N . RIGHT_PARENTHESES M statement N ELSE M statement

    RIGHT_PARENTHESES  shift, and go to state 340


State 332

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  195                    | SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES . statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 341
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 333

   80 expression: expression . COMMA assignment_expression
  196 iteration_statement: WHILE M LEFT_PARENTHESES expression . RIGHT_PARENTHESES M statement

    COMMA              shift, and go to state 199
    RIGHT_PARENTHESES  shift, and go to state 342


State 334

  183 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt . RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 343


State 335

   15 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET .

    $default  reduce using rule 15 (postfix_expression)


State 336

   58 M: . %empty
   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON . M conditional_expression

    $default  reduce using rule 58 (M)

    M  go to state 344


State 337

  197 iteration_statement: DO M statement M WHILE . LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    LEFT_PARENTHESES  shift, and go to state 345


State 338

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | . %empty  [RIGHT_PARENTHESES]
  199 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON . expression_opt RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    expression_opt             go to state 346


State 339

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M . expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    expression_opt             go to state 347


State 340

   58 M: . %empty
  193 selection_statement: IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES . M statement N
  194                    | IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES . M statement N ELSE M statement

    $default  reduce using rule 58 (M)

    M  go to state 348


State 341

  195 selection_statement: SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement .

    $default  reduce using rule 195 (selection_statement)


State 342

   58 M: . %empty
  196 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES . M statement

    $default  reduce using rule 58 (M)

    M  go to state 349


State 343

  183 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET .

    $default  reduce using rule 183 (compound_statement)


State 344

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65                       | logical_OR_expression N QUESTION_MARK M expression N COLON M . conditional_expression

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 156
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 350


State 345

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  197 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES . expression RIGHT_PARENTHESES SEMI_COLON

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 351


State 346

  199 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt . RIGHT_PARENTHESES statement

    RIGHT_PARENTHESES  shift, and go to state 352


State 347

  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt . SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 353


State 348

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  193                    | IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M . statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  194                    | IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M . statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 354
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 349

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  196                    | WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M . statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 355
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 350

   65 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression .

    $default  reduce using rule 65 (conditional_expression)


State 351

   80 expression: expression . COMMA assignment_expression
  197 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression . RIGHT_PARENTHESES SEMI_COLON

    COMMA              shift, and go to state 199
    RIGHT_PARENTHESES  shift, and go to state 356


State 352

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  199                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES . statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 357
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 353

   58 M: . %empty
  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON . M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 58 (M)

    M  go to state 358


State 354

   59 N: . %empty
  193 selection_statement: IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement . N
  194                    | IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement . N ELSE M statement

    $default  reduce using rule 59 (N)

    N  go to state 359


State 355

  196 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement .

    $default  reduce using rule 196 (iteration_statement)


State 356

  197 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES . SEMI_COLON

    SEMI_COLON  shift, and go to state 360


State 357

  199 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement .

    $default  reduce using rule 199 (iteration_statement)


State 358

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  191 expression_opt: . expression
  192               | . %empty  [RIGHT_PARENTHESES]
  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M . expression_opt N RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 73
    IDENTIFIER          shift, and go to state 74
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    expression_opt             go to state 361


State 359

  193 selection_statement: IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N .  [AUTO, BREAK, CASE, CHARTYPE, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ENUM, EXTERN, FLOATTYPE, FOR, GOTO, IF, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, RETURN, SHORT, SIGNED, SIZEOF, STATIC, SWITCH, UNSIGNED, VOIDTYPE, VOLATILE, WHILE, _BOOL, _COMPLEX, _IMAGINARY, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, SEMI_COLON, DECREMENT, BITWISE_AND]
  194                    | IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N . ELSE M statement

    ELSE  shift, and go to state 362

    $default  reduce using rule 193 (selection_statement)

    Conflict between rule 193 and token ELSE resolved as shift (%right ELSE).


State 360

  197 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON .

    $default  reduce using rule 197 (iteration_statement)


State 361

   59 N: . %empty
  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt . N RIGHT_PARENTHESES M statement

    $default  reduce using rule 59 (N)

    N  go to state 363


State 362

   58 M: . %empty
  194 selection_statement: IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE . M statement

    $default  reduce using rule 58 (M)

    M  go to state 364


State 363

  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N . RIGHT_PARENTHESES M statement

    RIGHT_PARENTHESES  shift, and go to state 365


State 364

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  194                    | IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M . statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 366
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 365

   58 M: . %empty
  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES . M statement

    $default  reduce using rule 58 (M)

    M  go to state 367


State 366

  194 selection_statement: IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement .

    $default  reduce using rule 194 (selection_statement)


State 367

    1 primary_expression: . IDENTIFIER
    2                   | . INTEGER_CONSTANT
    3                   | . FLOATING_CONSTANT
    4                   | . CHARACTER_CONSTANT
    5                   | . STRING_LITERAL
    6                   | . LEFT_PARENTHESES expression RIGHT_PARENTHESES
    7 postfix_expression: . primary_expression
    8                   | . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    9                   | . postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
   10                   | . postfix_expression DOT IDENTIFIER
   11                   | . postfix_expression ARROW IDENTIFIER
   12                   | . postfix_expression INCREMENT
   13                   | . postfix_expression DECREMENT
   14                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   15                   | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   20 unary_expression: . postfix_expression
   21                 | . INCREMENT unary_expression
   22                 | . DECREMENT unary_expression
   23                 | . unary_operator cast_expression
   24                 | . SIZEOF unary_expression
   25                 | . SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   26 unary_operator: . BITWISE_AND
   27               | . ASTERISK
   28               | . PLUS
   29               | . MINUS
   30               | . TILDE
   31               | . EXCLAMATION
   32 cast_expression: . unary_expression
   33                | . LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: . cast_expression
   35                          | . multiplicative_expression ASTERISK cast_expression
   36                          | . multiplicative_expression SLASH cast_expression
   37                          | . multiplicative_expression MODULO cast_expression
   38 additive_expression: . multiplicative_expression
   39                    | . additive_expression PLUS multiplicative_expression
   40                    | . additive_expression MINUS multiplicative_expression
   41 shift_expression: . additive_expression
   42                 | . shift_expression LEFT_SHIFT additive_expression
   43                 | . shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: . shift_expression
   45                      | . relational_expression LESS_THAN shift_expression
   46                      | . relational_expression GREATER_THAN shift_expression
   47                      | . relational_expression LESS_EQUAL_THAN shift_expression
   48                      | . relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: . relational_expression
   50                    | . equality_expression EQUALS relational_expression
   51                    | . equality_expression NOT_EQUALS relational_expression
   52 AND_expression: . equality_expression
   53               | . AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: . AND_expression
   55                        | . exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: . exclusive_OR_expression
   57                        | . inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: . inclusive_OR_expression
   61                       | . logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: . logical_AND_expression
   63                      | . logical_OR_expression LOGICAL_OR M logical_AND_expression
   64 conditional_expression: . logical_OR_expression
   65                       | . logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   66 assignment_expression: . conditional_expression
   67                      | . unary_expression assignment_operator assignment_expression
   79 expression: . assignment_expression
   80           | . expression COMMA assignment_expression
  173 statement: . labeled_statement
  174          | . compound_statement
  175          | . expression_statement
  176          | . selection_statement
  177          | . iteration_statement
  178          | . jump_statement
  179 labeled_statement: . IDENTIFIER COLON statement
  180                  | . CASE constant_expression COLON statement
  181                  | . DEFAULT COLON statement
  183 compound_statement: . LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  190 expression_statement: . expression_opt SEMI_COLON
  191 expression_opt: . expression
  192               | . %empty  [SEMI_COLON]
  193 selection_statement: . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N
  194                    | . IF LEFT_PARENTHESES expression N RIGHT_PARENTHESES M statement N ELSE M statement
  195                    | . SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  196 iteration_statement: . WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  197                    | . DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  198                    | . FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  198                    | FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M . statement
  199                    | . FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  200 jump_statement: . GOTO IDENTIFIER SEMI_COLON
  201               | . CONTINUE SEMI_COLON
  202               | . BREAK SEMI_COLON
  203               | . RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 238
    CASE                shift, and go to state 239
    CONTINUE            shift, and go to state 240
    DEFAULT             shift, and go to state 241
    DO                  shift, and go to state 242
    FOR                 shift, and go to state 243
    GOTO                shift, and go to state 244
    IF                  shift, and go to state 245
    RETURN              shift, and go to state 246
    SIZEOF              shift, and go to state 73
    SWITCH              shift, and go to state 247
    WHILE               shift, and go to state 248
    IDENTIFIER          shift, and go to state 249
    INTEGER_CONSTANT    shift, and go to state 75
    FLOATING_CONSTANT   shift, and go to state 76
    CHARACTER_CONSTANT  shift, and go to state 77
    STRING_LITERAL      shift, and go to state 78
    INCREMENT           shift, and go to state 79
    LEFT_PARENTHESES    shift, and go to state 80
    LEFT_CURLY_BRACKET  shift, and go to state 250
    ASTERISK            shift, and go to state 82
    PLUS                shift, and go to state 83
    MINUS               shift, and go to state 84
    TILDE               shift, and go to state 85
    EXCLAMATION         shift, and go to state 86
    DECREMENT           shift, and go to state 87
    BITWISE_AND         shift, and go to state 88

    $default  reduce using rule 192 (expression_opt)

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    unary_operator             go to state 92
    cast_expression            go to state 93
    multiplicative_expression  go to state 94
    additive_expression        go to state 95
    shift_expression           go to state 96
    relational_expression      go to state 97
    equality_expression        go to state 98
    AND_expression             go to state 99
    exclusive_OR_expression    go to state 100
    inclusive_OR_expression    go to state 101
    logical_AND_expression     go to state 102
    logical_OR_expression      go to state 103
    conditional_expression     go to state 104
    assignment_expression      go to state 124
    expression                 go to state 251
    statement                  go to state 368
    labeled_statement          go to state 254
    compound_statement         go to state 255
    expression_statement       go to state 259
    expression_opt             go to state 260
    selection_statement        go to state 261
    iteration_statement        go to state 262
    jump_statement             go to state 263


State 368

  198 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement .

    $default  reduce using rule 198 (iteration_statement)
