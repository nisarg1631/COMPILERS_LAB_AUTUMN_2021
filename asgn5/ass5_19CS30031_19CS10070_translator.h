#ifndef _TRANSLATOR_H
#define _TRANSLATOR_H

#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <list>

using namespace std;

// Symbol type class ( type safe representation for the type of a symbol )
class SymbolType {
    public:
        enum typeEnum {VOID, CHAR, INT, FLOAT, POINTER, FUNCTION, ARRAY, BLOCK} type;
        int width;
        SymbolType *arrayType;

        SymbolType(typeEnum, int = 0, SymbolType * = NULL);
        int getSize();
};

// Symbol table class
class SymbolTable {
    public:
        string name;
        map<string, Symbol> symbols;    // list of all symbols in this table, mapped by their names for fast access
        SymbolTable *parent;            // parent symbol table of this symbol table
        
        SymbolTable(string = "NULL", SymbolTable * = NULL);
        Symbol *lookup(string);
        void print();
        void update();
};

// Symbol class ( represents a single symbol in the symbol table )
class Symbol {
    public:
        string name;
        int size, offset;
        SymbolType *type;
        SymbolTable *nestedTable;
        string initialValue;

        Symbol(string, SymbolType::typeEnum = SymbolType::INT, string = "-");
        Symbol *update(SymbolType *);
        Symbol *convert(SymbolType::typeEnum);
};

// Label class ( represents a label )
class Label {
    public:
        string name;
        int address;
        list<int> gotoList;     // list of dangling gotoâ€™s for this label

        Label(string, int = 0);
};

// Quad class ( represents a 3-address quad )
class Quad {
    public:
        string op, arg1, arg2, result;

        Quad(string, string, string = "=", string = "");
        Quad(string, int, string = "=", string = "");
        Quad(string, char, string = "=", string = "");
        Quad(string, float, string = "=", string = "");
        void print();
};

// Expression attributes
class Expression {
    public:
        Symbol *symbol;
        enum typeEnum {BOOLEAN, NONBOOLEAN} type;
        list<int> trueList, falseList, nextList;
};

// Array attributes
class Array {
    public:
        Symbol *temp;    // temporary used for computing the offset for the array reference
        enum typeEnum {OTHER, POINTER, ARRAY} type;    // Pointers, arrays and normal expressions are all stored using array attributes initially
        Symbol *symbol;  // pointer to the symbol table entry
        SymbolType *subArrayType;   // type of the sub-array generated by A
};

// Statement attributes
class Statement {
    public:
        list<int> nextList;     // List of quads having dangling exits for this statement
};

// Emit functions for generating quads
void emit(string, string, string = "", string = "");
void emit(string, string, int, string = "");

// Backpatching functions
void backpatch(list<int>, int);
list<int> makeList(int);
list<int> merge(list<int> &, list<int> &);

// Other helper functions
int nextInstruction();
Symbol *gentemp(SymbolType::typeEnum, string = "");
bool typeCheck(Symbol *, Symbol *);

// Utility functions
string toString(int);
string toString(float);
string toString(char);

// Global variables
extern vector<Quad *> quadArray;
extern SymbolTable *currentTable, *globalTable, *parentTable;
extern Symbol *currentSymbol;
extern map<string, Label> labelTable;
extern string blockName;
extern SymbolType::typeEnum currentType;
extern int tableCount, temporaryCount;

#endif
